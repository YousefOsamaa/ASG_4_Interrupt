
ASG_4_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000013aa  0000143e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800070  00800070  0000144e  2**0
                  ALLOC
  3 .stab         00002544  00000000  00000000  00001450  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010a6  00000000  00000000  00003994  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_1>
       8:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_2>
       c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c6 09 	call	0x138c	; 0x138c <main>
      8a:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SREG_vid_EnableBitI>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	78 94       	sei
      9c:	cf 91       	pop	r28
      9e:	df 91       	pop	r29
      a0:	08 95       	ret

000000a2 <SREG_vid_ClearBitI>:
{
    asm("SEI");
}

void SREG_vid_ClearBitI(void)
{
      a2:	df 93       	push	r29
      a4:	cf 93       	push	r28
      a6:	cd b7       	in	r28, 0x3d	; 61
      a8:	de b7       	in	r29, 0x3e	; 62
    asm("CLI");
      aa:	f8 94       	cli

      ac:	cf 91       	pop	r28
      ae:	df 91       	pop	r29
      b0:	08 95       	ret

000000b2 <EXTI_enu_Initialization>:


//APIs implementations

extern ErrorState_t EXTI_enu_Initialization(void)
{
      b2:	df 93       	push	r29
      b4:	cf 93       	push	r28
      b6:	00 d0       	rcall	.+0      	; 0xb8 <EXTI_enu_Initialization+0x6>
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
      bc:	81 e0       	ldi	r24, 0x01	; 1
      be:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
      c0:	19 82       	std	Y+1, r1	; 0x01
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
      c2:	19 82       	std	Y+1, r1	; 0x01
      c4:	4a c0       	rjmp	.+148    	; 0x15a <EXTI_enu_Initialization+0xa8>
    {
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
      c6:	89 81       	ldd	r24, Y+1	; 0x01
      c8:	28 2f       	mov	r18, r24
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	c9 01       	movw	r24, r18
      ce:	88 0f       	add	r24, r24
      d0:	99 1f       	adc	r25, r25
      d2:	82 0f       	add	r24, r18
      d4:	93 1f       	adc	r25, r19
      d6:	fc 01       	movw	r30, r24
      d8:	ef 59       	subi	r30, 0x9F	; 159
      da:	ff 4f       	sbci	r31, 0xFF	; 255
      dc:	40 81       	ld	r20, Z
      de:	89 81       	ldd	r24, Y+1	; 0x01
      e0:	28 2f       	mov	r18, r24
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	c9 01       	movw	r24, r18
      e6:	88 0f       	add	r24, r24
      e8:	99 1f       	adc	r25, r25
      ea:	82 0f       	add	r24, r18
      ec:	93 1f       	adc	r25, r19
      ee:	fc 01       	movw	r30, r24
      f0:	ee 59       	subi	r30, 0x9E	; 158
      f2:	ff 4f       	sbci	r31, 0xFF	; 255
      f4:	90 81       	ld	r25, Z
      f6:	84 2f       	mov	r24, r20
      f8:	69 2f       	mov	r22, r25
      fa:	0e 94 2a 02 	call	0x454	; 0x454 <enu_SetMode>
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
      fe:	89 81       	ldd	r24, Y+1	; 0x01
     100:	28 2f       	mov	r18, r24
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	c9 01       	movw	r24, r18
     106:	88 0f       	add	r24, r24
     108:	99 1f       	adc	r25, r25
     10a:	82 0f       	add	r24, r18
     10c:	93 1f       	adc	r25, r19
     10e:	fc 01       	movw	r30, r24
     110:	ef 59       	subi	r30, 0x9F	; 159
     112:	ff 4f       	sbci	r31, 0xFF	; 255
     114:	40 81       	ld	r20, Z
     116:	89 81       	ldd	r24, Y+1	; 0x01
     118:	28 2f       	mov	r18, r24
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	c9 01       	movw	r24, r18
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	82 0f       	add	r24, r18
     124:	93 1f       	adc	r25, r19
     126:	fc 01       	movw	r30, r24
     128:	ed 59       	subi	r30, 0x9D	; 157
     12a:	ff 4f       	sbci	r31, 0xFF	; 255
     12c:	90 81       	ld	r25, Z
     12e:	84 2f       	mov	r24, r20
     130:	69 2f       	mov	r22, r25
     132:	0e 94 a5 02 	call	0x54a	; 0x54a <enu_SetSenseLevel>
        enu_SetFlagValue(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_HIGH);
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	28 2f       	mov	r18, r24
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	c9 01       	movw	r24, r18
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	82 0f       	add	r24, r18
     144:	93 1f       	adc	r25, r19
     146:	fc 01       	movw	r30, r24
     148:	ef 59       	subi	r30, 0x9F	; 159
     14a:	ff 4f       	sbci	r31, 0xFF	; 255
     14c:	80 81       	ld	r24, Z
     14e:	61 e0       	ldi	r22, 0x01	; 1
     150:	0e 94 4c 03 	call	0x698	; 0x698 <enu_SetFlagValue>
extern ErrorState_t EXTI_enu_Initialization(void)
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;
    for( Local_u8_Counter = 0; Local_u8_Counter < EXTI_u8_INTCount; Local_u8_Counter++)
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	8f 5f       	subi	r24, 0xFF	; 255
     158:	89 83       	std	Y+1, r24	; 0x01
     15a:	90 91 60 00 	lds	r25, 0x0060
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	89 17       	cp	r24, r25
     162:	08 f4       	brcc	.+2      	; 0x166 <EXTI_enu_Initialization+0xb4>
     164:	b0 cf       	rjmp	.-160    	; 0xc6 <EXTI_enu_Initialization+0x14>
        enu_SetMode(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTMode);
        enu_SetSenseLevel(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_astr_INTList[Local_u8_Counter].INTSenseLevel);
        enu_SetFlagValue(EXTI_astr_INTList[Local_u8_Counter].INTNumber, EXTI_HIGH);
    }
    
    Local_u8_ErrorFlag = ES_OK;
     166:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
     168:	8a 81       	ldd	r24, Y+2	; 0x02
}
     16a:	0f 90       	pop	r0
     16c:	0f 90       	pop	r0
     16e:	cf 91       	pop	r28
     170:	df 91       	pop	r29
     172:	08 95       	ret

00000174 <EXTI_enu_ISC>:

extern ErrorState_t EXTI_enu_ISC(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
     174:	df 93       	push	r29
     176:	cf 93       	push	r28
     178:	00 d0       	rcall	.+0      	; 0x17a <EXTI_enu_ISC+0x6>
     17a:	0f 92       	push	r0
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
     180:	8a 83       	std	Y+2, r24	; 0x02
     182:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetSenseLevel(Copy_u8_INTNumber, Copy_u8_SenseLevel);
     188:	8a 81       	ldd	r24, Y+2	; 0x02
     18a:	6b 81       	ldd	r22, Y+3	; 0x03
     18c:	0e 94 a5 02 	call	0x54a	; 0x54a <enu_SetSenseLevel>
     190:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
     192:	89 81       	ldd	r24, Y+1	; 0x01
}
     194:	0f 90       	pop	r0
     196:	0f 90       	pop	r0
     198:	0f 90       	pop	r0
     19a:	cf 91       	pop	r28
     19c:	df 91       	pop	r29
     19e:	08 95       	ret

000001a0 <EXTI_enu_INTMode>:

extern ErrorState_t EXTI_enu_INTMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
     1a0:	df 93       	push	r29
     1a2:	cf 93       	push	r28
     1a4:	00 d0       	rcall	.+0      	; 0x1a6 <EXTI_enu_INTMode+0x6>
     1a6:	0f 92       	push	r0
     1a8:	cd b7       	in	r28, 0x3d	; 61
     1aa:	de b7       	in	r29, 0x3e	; 62
     1ac:	8a 83       	std	Y+2, r24	; 0x02
     1ae:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetMode(Copy_u8_INTNumber, Copy_u8_Mode);
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	6b 81       	ldd	r22, Y+3	; 0x03
     1b8:	0e 94 2a 02 	call	0x454	; 0x454 <enu_SetMode>
     1bc:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
     1be:	89 81       	ldd	r24, Y+1	; 0x01
}
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	cf 91       	pop	r28
     1c8:	df 91       	pop	r29
     1ca:	08 95       	ret

000001cc <EXTI_enu_GetPIF>:

extern ErrorState_t EXTI_enu_GetPIF (u8 Copy_u8_INTNumber, u8* Copy_pu8_Result)
{
     1cc:	df 93       	push	r29
     1ce:	cf 93       	push	r28
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <EXTI_enu_GetPIF+0x6>
     1d2:	00 d0       	rcall	.+0      	; 0x1d4 <EXTI_enu_GetPIF+0x8>
     1d4:	00 d0       	rcall	.+0      	; 0x1d6 <EXTI_enu_GetPIF+0xa>
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
     1da:	8a 83       	std	Y+2, r24	; 0x02
     1dc:	7c 83       	std	Y+4, r23	; 0x04
     1de:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	89 83       	std	Y+1, r24	; 0x01

    if (Copy_pu8_Result)
     1e4:	8b 81       	ldd	r24, Y+3	; 0x03
     1e6:	9c 81       	ldd	r25, Y+4	; 0x04
     1e8:	00 97       	sbiw	r24, 0x00	; 0
     1ea:	d1 f1       	breq	.+116    	; 0x260 <EXTI_enu_GetPIF+0x94>
    {

        switch(Copy_u8_INTNumber)
     1ec:	8a 81       	ldd	r24, Y+2	; 0x02
     1ee:	28 2f       	mov	r18, r24
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	3e 83       	std	Y+6, r19	; 0x06
     1f4:	2d 83       	std	Y+5, r18	; 0x05
     1f6:	8d 81       	ldd	r24, Y+5	; 0x05
     1f8:	9e 81       	ldd	r25, Y+6	; 0x06
     1fa:	81 30       	cpi	r24, 0x01	; 1
     1fc:	91 05       	cpc	r25, r1
     1fe:	b1 f0       	breq	.+44     	; 0x22c <EXTI_enu_GetPIF+0x60>
     200:	2d 81       	ldd	r18, Y+5	; 0x05
     202:	3e 81       	ldd	r19, Y+6	; 0x06
     204:	22 30       	cpi	r18, 0x02	; 2
     206:	31 05       	cpc	r19, r1
     208:	e1 f0       	breq	.+56     	; 0x242 <EXTI_enu_GetPIF+0x76>
     20a:	8d 81       	ldd	r24, Y+5	; 0x05
     20c:	9e 81       	ldd	r25, Y+6	; 0x06
     20e:	00 97       	sbiw	r24, 0x00	; 0
     210:	21 f5       	brne	.+72     	; 0x25a <EXTI_enu_GetPIF+0x8e>
        {
            case EXTI_INT0:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF0);
     212:	ea e5       	ldi	r30, 0x5A	; 90
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	82 95       	swap	r24
     21a:	86 95       	lsr	r24
     21c:	86 95       	lsr	r24
     21e:	83 70       	andi	r24, 0x03	; 3
     220:	81 70       	andi	r24, 0x01	; 1
     222:	eb 81       	ldd	r30, Y+3	; 0x03
     224:	fc 81       	ldd	r31, Y+4	; 0x04
     226:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
     228:	19 82       	std	Y+1, r1	; 0x01
     22a:	1c c0       	rjmp	.+56     	; 0x264 <EXTI_enu_GetPIF+0x98>
                break;
            }
            case EXTI_INT1:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF1);
     22c:	ea e5       	ldi	r30, 0x5A	; 90
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	88 1f       	adc	r24, r24
     234:	88 27       	eor	r24, r24
     236:	88 1f       	adc	r24, r24
     238:	eb 81       	ldd	r30, Y+3	; 0x03
     23a:	fc 81       	ldd	r31, Y+4	; 0x04
     23c:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
     23e:	19 82       	std	Y+1, r1	; 0x01
     240:	11 c0       	rjmp	.+34     	; 0x264 <EXTI_enu_GetPIF+0x98>

                break;
            }
            case EXTI_INT2:
            {
                *Copy_pu8_Result = 1 & (GIFR >> GIFR_INTF2);
     242:	ea e5       	ldi	r30, 0x5A	; 90
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	80 81       	ld	r24, Z
     248:	82 95       	swap	r24
     24a:	86 95       	lsr	r24
     24c:	87 70       	andi	r24, 0x07	; 7
     24e:	81 70       	andi	r24, 0x01	; 1
     250:	eb 81       	ldd	r30, Y+3	; 0x03
     252:	fc 81       	ldd	r31, Y+4	; 0x04
     254:	80 83       	st	Z, r24

                Local_u8_ErrorFlag = ES_OK;
     256:	19 82       	std	Y+1, r1	; 0x01
     258:	05 c0       	rjmp	.+10     	; 0x264 <EXTI_enu_GetPIF+0x98>
                break;
            }

            default:
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	89 83       	std	Y+1, r24	; 0x01
     25e:	02 c0       	rjmp	.+4      	; 0x264 <EXTI_enu_GetPIF+0x98>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
     260:	83 e0       	ldi	r24, 0x03	; 3
     262:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
     264:	89 81       	ldd	r24, Y+1	; 0x01
}
     266:	26 96       	adiw	r28, 0x06	; 6
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	f8 94       	cli
     26c:	de bf       	out	0x3e, r29	; 62
     26e:	0f be       	out	0x3f, r0	; 63
     270:	cd bf       	out	0x3d, r28	; 61
     272:	cf 91       	pop	r28
     274:	df 91       	pop	r29
     276:	08 95       	ret

00000278 <EXTI_enu_ClearINTFx>:

extern ErrorState_t EXTI_enu_ClearINTFx (u8 Copy_u8_INTNumber)
{
     278:	df 93       	push	r29
     27a:	cf 93       	push	r28
     27c:	00 d0       	rcall	.+0      	; 0x27e <EXTI_enu_ClearINTFx+0x6>
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
     282:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	89 83       	std	Y+1, r24	; 0x01

    Local_u8_ErrorFlag = enu_SetFlagValue(Copy_u8_INTNumber, EXTI_HIGH);
     288:	8a 81       	ldd	r24, Y+2	; 0x02
     28a:	61 e0       	ldi	r22, 0x01	; 1
     28c:	0e 94 4c 03 	call	0x698	; 0x698 <enu_SetFlagValue>
     290:	89 83       	std	Y+1, r24	; 0x01

    return Local_u8_ErrorFlag;
     292:	89 81       	ldd	r24, Y+1	; 0x01
}
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	cf 91       	pop	r28
     29a:	df 91       	pop	r29
     29c:	08 95       	ret

0000029e <EXTI_enu_SetCallBack>:

extern ErrorState_t EXTI_enu_SetCallBack(u8 Copy_u8_INTNumber, void (* Copy_pfun_AppFunction)(void), void* Copy_pvid_Parameters)
{
     29e:	df 93       	push	r29
     2a0:	cf 93       	push	r28
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <EXTI_enu_SetCallBack+0x6>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <EXTI_enu_SetCallBack+0x8>
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <EXTI_enu_SetCallBack+0xa>
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	8a 83       	std	Y+2, r24	; 0x02
     2ae:	7c 83       	std	Y+4, r23	; 0x04
     2b0:	6b 83       	std	Y+3, r22	; 0x03
     2b2:	5e 83       	std	Y+6, r21	; 0x06
     2b4:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_ErrorFlag = ES_NOK;
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pfun_AppFunction)
     2ba:	8b 81       	ldd	r24, Y+3	; 0x03
     2bc:	9c 81       	ldd	r25, Y+4	; 0x04
     2be:	00 97       	sbiw	r24, 0x00	; 0
     2c0:	d1 f0       	breq	.+52     	; 0x2f6 <EXTI_enu_SetCallBack+0x58>
    {
        pfun_ISRPointers[Copy_u8_INTNumber] = Copy_pfun_AppFunction;
     2c2:	8a 81       	ldd	r24, Y+2	; 0x02
     2c4:	88 2f       	mov	r24, r24
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	2b 81       	ldd	r18, Y+3	; 0x03
     2ca:	3c 81       	ldd	r19, Y+4	; 0x04
     2cc:	88 0f       	add	r24, r24
     2ce:	99 1f       	adc	r25, r25
     2d0:	fc 01       	movw	r30, r24
     2d2:	e0 59       	subi	r30, 0x90	; 144
     2d4:	ff 4f       	sbci	r31, 0xFF	; 255
     2d6:	31 83       	std	Z+1, r19	; 0x01
     2d8:	20 83       	st	Z, r18

        apvid_ISRParameters[Copy_u8_INTNumber] = Copy_pvid_Parameters;
     2da:	8a 81       	ldd	r24, Y+2	; 0x02
     2dc:	88 2f       	mov	r24, r24
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	88 0f       	add	r24, r24
     2e2:	99 1f       	adc	r25, r25
     2e4:	fc 01       	movw	r30, r24
     2e6:	ea 58       	subi	r30, 0x8A	; 138
     2e8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ea:	8d 81       	ldd	r24, Y+5	; 0x05
     2ec:	9e 81       	ldd	r25, Y+6	; 0x06
     2ee:	91 83       	std	Z+1, r25	; 0x01
     2f0:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
     2f2:	19 82       	std	Y+1, r1	; 0x01
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <EXTI_enu_SetCallBack+0x5c>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     2f6:	82 e0       	ldi	r24, 0x02	; 2
     2f8:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
}
     2fc:	26 96       	adiw	r28, 0x06	; 6
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	de bf       	out	0x3e, r29	; 62
     304:	0f be       	out	0x3f, r0	; 63
     306:	cd bf       	out	0x3d, r28	; 61
     308:	cf 91       	pop	r28
     30a:	df 91       	pop	r29
     30c:	08 95       	ret

0000030e <__vector_1>:
void __vector_1 (void)__attribute__((signal));
void __vector_2 (void)__attribute__((signal));
void __vector_3 (void)__attribute__((signal));

void __vector_1 (void)
{
     30e:	1f 92       	push	r1
     310:	0f 92       	push	r0
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	0f 92       	push	r0
     316:	11 24       	eor	r1, r1
     318:	2f 93       	push	r18
     31a:	3f 93       	push	r19
     31c:	4f 93       	push	r20
     31e:	5f 93       	push	r21
     320:	6f 93       	push	r22
     322:	7f 93       	push	r23
     324:	8f 93       	push	r24
     326:	9f 93       	push	r25
     328:	af 93       	push	r26
     32a:	bf 93       	push	r27
     32c:	ef 93       	push	r30
     32e:	ff 93       	push	r31
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT0])
     338:	80 91 70 00 	lds	r24, 0x0070
     33c:	90 91 71 00 	lds	r25, 0x0071
     340:	00 97       	sbiw	r24, 0x00	; 0
     342:	49 f0       	breq	.+18     	; 0x356 <__vector_1+0x48>
    {
        pfun_ISRPointers[EXTI_INT0] (apvid_ISRParameters[EXTI_INT0]);
     344:	e0 91 70 00 	lds	r30, 0x0070
     348:	f0 91 71 00 	lds	r31, 0x0071
     34c:	80 91 76 00 	lds	r24, 0x0076
     350:	90 91 77 00 	lds	r25, 0x0077
     354:	09 95       	icall
    }
}
     356:	cf 91       	pop	r28
     358:	df 91       	pop	r29
     35a:	ff 91       	pop	r31
     35c:	ef 91       	pop	r30
     35e:	bf 91       	pop	r27
     360:	af 91       	pop	r26
     362:	9f 91       	pop	r25
     364:	8f 91       	pop	r24
     366:	7f 91       	pop	r23
     368:	6f 91       	pop	r22
     36a:	5f 91       	pop	r21
     36c:	4f 91       	pop	r20
     36e:	3f 91       	pop	r19
     370:	2f 91       	pop	r18
     372:	0f 90       	pop	r0
     374:	0f be       	out	0x3f, r0	; 63
     376:	0f 90       	pop	r0
     378:	1f 90       	pop	r1
     37a:	18 95       	reti

0000037c <__vector_2>:
//INT1
void __vector_2 (void)
{
     37c:	1f 92       	push	r1
     37e:	0f 92       	push	r0
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	0f 92       	push	r0
     384:	11 24       	eor	r1, r1
     386:	2f 93       	push	r18
     388:	3f 93       	push	r19
     38a:	4f 93       	push	r20
     38c:	5f 93       	push	r21
     38e:	6f 93       	push	r22
     390:	7f 93       	push	r23
     392:	8f 93       	push	r24
     394:	9f 93       	push	r25
     396:	af 93       	push	r26
     398:	bf 93       	push	r27
     39a:	ef 93       	push	r30
     39c:	ff 93       	push	r31
     39e:	df 93       	push	r29
     3a0:	cf 93       	push	r28
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT1])
     3a6:	80 91 72 00 	lds	r24, 0x0072
     3aa:	90 91 73 00 	lds	r25, 0x0073
     3ae:	00 97       	sbiw	r24, 0x00	; 0
     3b0:	49 f0       	breq	.+18     	; 0x3c4 <__vector_2+0x48>
    {
        pfun_ISRPointers[EXTI_INT1] (apvid_ISRParameters[EXTI_INT1]);
     3b2:	e0 91 72 00 	lds	r30, 0x0072
     3b6:	f0 91 73 00 	lds	r31, 0x0073
     3ba:	80 91 78 00 	lds	r24, 0x0078
     3be:	90 91 79 00 	lds	r25, 0x0079
     3c2:	09 95       	icall
    }
}
     3c4:	cf 91       	pop	r28
     3c6:	df 91       	pop	r29
     3c8:	ff 91       	pop	r31
     3ca:	ef 91       	pop	r30
     3cc:	bf 91       	pop	r27
     3ce:	af 91       	pop	r26
     3d0:	9f 91       	pop	r25
     3d2:	8f 91       	pop	r24
     3d4:	7f 91       	pop	r23
     3d6:	6f 91       	pop	r22
     3d8:	5f 91       	pop	r21
     3da:	4f 91       	pop	r20
     3dc:	3f 91       	pop	r19
     3de:	2f 91       	pop	r18
     3e0:	0f 90       	pop	r0
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	0f 90       	pop	r0
     3e6:	1f 90       	pop	r1
     3e8:	18 95       	reti

000003ea <__vector_3>:
//INT2
void __vector_3 (void)
{
     3ea:	1f 92       	push	r1
     3ec:	0f 92       	push	r0
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	0f 92       	push	r0
     3f2:	11 24       	eor	r1, r1
     3f4:	2f 93       	push	r18
     3f6:	3f 93       	push	r19
     3f8:	4f 93       	push	r20
     3fa:	5f 93       	push	r21
     3fc:	6f 93       	push	r22
     3fe:	7f 93       	push	r23
     400:	8f 93       	push	r24
     402:	9f 93       	push	r25
     404:	af 93       	push	r26
     406:	bf 93       	push	r27
     408:	ef 93       	push	r30
     40a:	ff 93       	push	r31
     40c:	df 93       	push	r29
     40e:	cf 93       	push	r28
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
    if(pfun_ISRPointers[EXTI_INT2])
     414:	80 91 74 00 	lds	r24, 0x0074
     418:	90 91 75 00 	lds	r25, 0x0075
     41c:	00 97       	sbiw	r24, 0x00	; 0
     41e:	39 f0       	breq	.+14     	; 0x42e <__vector_3+0x44>
    {
        pfun_ISRPointers[EXTI_INT2] (EXTI_INT2);
     420:	e0 91 74 00 	lds	r30, 0x0074
     424:	f0 91 75 00 	lds	r31, 0x0075
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	09 95       	icall
    }
    
}
     42e:	cf 91       	pop	r28
     430:	df 91       	pop	r29
     432:	ff 91       	pop	r31
     434:	ef 91       	pop	r30
     436:	bf 91       	pop	r27
     438:	af 91       	pop	r26
     43a:	9f 91       	pop	r25
     43c:	8f 91       	pop	r24
     43e:	7f 91       	pop	r23
     440:	6f 91       	pop	r22
     442:	5f 91       	pop	r21
     444:	4f 91       	pop	r20
     446:	3f 91       	pop	r19
     448:	2f 91       	pop	r18
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <enu_SetMode>:


//Local functions' implementations

static ErrorState_t enu_SetMode(u8 Copy_u8_INTNumber, u8 Copy_u8_Mode)
{
     454:	df 93       	push	r29
     456:	cf 93       	push	r28
     458:	00 d0       	rcall	.+0      	; 0x45a <enu_SetMode+0x6>
     45a:	00 d0       	rcall	.+0      	; 0x45c <enu_SetMode+0x8>
     45c:	0f 92       	push	r0
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
     462:	8a 83       	std	Y+2, r24	; 0x02
     464:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
     46a:	8a 81       	ldd	r24, Y+2	; 0x02
     46c:	28 2f       	mov	r18, r24
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	3d 83       	std	Y+5, r19	; 0x05
     472:	2c 83       	std	Y+4, r18	; 0x04
     474:	8c 81       	ldd	r24, Y+4	; 0x04
     476:	9d 81       	ldd	r25, Y+5	; 0x05
     478:	81 30       	cpi	r24, 0x01	; 1
     47a:	91 05       	cpc	r25, r1
     47c:	29 f1       	breq	.+74     	; 0x4c8 <enu_SetMode+0x74>
     47e:	2c 81       	ldd	r18, Y+4	; 0x04
     480:	3d 81       	ldd	r19, Y+5	; 0x05
     482:	22 30       	cpi	r18, 0x02	; 2
     484:	31 05       	cpc	r19, r1
     486:	d9 f1       	breq	.+118    	; 0x4fe <enu_SetMode+0xaa>
     488:	8c 81       	ldd	r24, Y+4	; 0x04
     48a:	9d 81       	ldd	r25, Y+5	; 0x05
     48c:	00 97       	sbiw	r24, 0x00	; 0
     48e:	09 f0       	breq	.+2      	; 0x492 <enu_SetMode+0x3e>
     490:	51 c0       	rjmp	.+162    	; 0x534 <enu_SetMode+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Mode == EXTI_INT_MODE)
     492:	8b 81       	ldd	r24, Y+3	; 0x03
     494:	81 30       	cpi	r24, 0x01	; 1
     496:	49 f4       	brne	.+18     	; 0x4aa <enu_SetMode+0x56>
            {
                GICR |= ( 1 << GICR_INT0);
     498:	ab e5       	ldi	r26, 0x5B	; 91
     49a:	b0 e0       	ldi	r27, 0x00	; 0
     49c:	eb e5       	ldi	r30, 0x5B	; 91
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	80 64       	ori	r24, 0x40	; 64
     4a4:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
     4a6:	19 82       	std	Y+1, r1	; 0x01
     4a8:	47 c0       	rjmp	.+142    	; 0x538 <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
     4aa:	8b 81       	ldd	r24, Y+3	; 0x03
     4ac:	88 23       	and	r24, r24
     4ae:	49 f4       	brne	.+18     	; 0x4c2 <enu_SetMode+0x6e>
            {
                GICR &= ~( 1 << GICR_INT0);
     4b0:	ab e5       	ldi	r26, 0x5B	; 91
     4b2:	b0 e0       	ldi	r27, 0x00	; 0
     4b4:	eb e5       	ldi	r30, 0x5B	; 91
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	80 81       	ld	r24, Z
     4ba:	8f 7b       	andi	r24, 0xBF	; 191
     4bc:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
     4be:	19 82       	std	Y+1, r1	; 0x01
     4c0:	3b c0       	rjmp	.+118    	; 0x538 <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	89 83       	std	Y+1, r24	; 0x01
     4c6:	38 c0       	rjmp	.+112    	; 0x538 <enu_SetMode+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
     4c8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ca:	81 30       	cpi	r24, 0x01	; 1
     4cc:	49 f4       	brne	.+18     	; 0x4e0 <enu_SetMode+0x8c>
            {
                GICR |= ( 1 << GICR_INT1);
     4ce:	ab e5       	ldi	r26, 0x5B	; 91
     4d0:	b0 e0       	ldi	r27, 0x00	; 0
     4d2:	eb e5       	ldi	r30, 0x5B	; 91
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	80 68       	ori	r24, 0x80	; 128
     4da:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
     4dc:	19 82       	std	Y+1, r1	; 0x01
     4de:	2c c0       	rjmp	.+88     	; 0x538 <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
     4e0:	8b 81       	ldd	r24, Y+3	; 0x03
     4e2:	88 23       	and	r24, r24
     4e4:	49 f4       	brne	.+18     	; 0x4f8 <enu_SetMode+0xa4>
            {
                GICR &= ~( 1 << GICR_INT1);
     4e6:	ab e5       	ldi	r26, 0x5B	; 91
     4e8:	b0 e0       	ldi	r27, 0x00	; 0
     4ea:	eb e5       	ldi	r30, 0x5B	; 91
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	80 81       	ld	r24, Z
     4f0:	8f 77       	andi	r24, 0x7F	; 127
     4f2:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
     4f4:	19 82       	std	Y+1, r1	; 0x01
     4f6:	20 c0       	rjmp	.+64     	; 0x538 <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	89 83       	std	Y+1, r24	; 0x01
     4fc:	1d c0       	rjmp	.+58     	; 0x538 <enu_SetMode+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Mode == EXTI_INT_MODE)
     4fe:	8b 81       	ldd	r24, Y+3	; 0x03
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	49 f4       	brne	.+18     	; 0x516 <enu_SetMode+0xc2>
            {
                GICR |= ( 1 << GICR_INT2);
     504:	ab e5       	ldi	r26, 0x5B	; 91
     506:	b0 e0       	ldi	r27, 0x00	; 0
     508:	eb e5       	ldi	r30, 0x5B	; 91
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	80 62       	ori	r24, 0x20	; 32
     510:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
     512:	19 82       	std	Y+1, r1	; 0x01
     514:	11 c0       	rjmp	.+34     	; 0x538 <enu_SetMode+0xe4>
            }
            else if (Copy_u8_Mode == EXTI_POLLING_MODE)
     516:	8b 81       	ldd	r24, Y+3	; 0x03
     518:	88 23       	and	r24, r24
     51a:	49 f4       	brne	.+18     	; 0x52e <enu_SetMode+0xda>
            {
                GICR &= ~( 1 << GICR_INT2);
     51c:	ab e5       	ldi	r26, 0x5B	; 91
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	eb e5       	ldi	r30, 0x5B	; 91
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 81       	ld	r24, Z
     526:	8f 7d       	andi	r24, 0xDF	; 223
     528:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
     52a:	19 82       	std	Y+1, r1	; 0x01
     52c:	05 c0       	rjmp	.+10     	; 0x538 <enu_SetMode+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	89 83       	std	Y+1, r24	; 0x01
     532:	02 c0       	rjmp	.+4      	; 0x538 <enu_SetMode+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;    
     538:	89 81       	ldd	r24, Y+1	; 0x01
}
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	cf 91       	pop	r28
     546:	df 91       	pop	r29
     548:	08 95       	ret

0000054a <enu_SetSenseLevel>:

static ErrorState_t enu_SetSenseLevel(u8 Copy_u8_INTNumber, u8 Copy_u8_SenseLevel)
{
     54a:	df 93       	push	r29
     54c:	cf 93       	push	r28
     54e:	00 d0       	rcall	.+0      	; 0x550 <enu_SetSenseLevel+0x6>
     550:	00 d0       	rcall	.+0      	; 0x552 <enu_SetSenseLevel+0x8>
     552:	0f 92       	push	r0
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	8a 83       	std	Y+2, r24	; 0x02
     55a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	28 2f       	mov	r18, r24
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	3d 83       	std	Y+5, r19	; 0x05
     568:	2c 83       	std	Y+4, r18	; 0x04
     56a:	8c 81       	ldd	r24, Y+4	; 0x04
     56c:	9d 81       	ldd	r25, Y+5	; 0x05
     56e:	81 30       	cpi	r24, 0x01	; 1
     570:	91 05       	cpc	r25, r1
     572:	e9 f1       	breq	.+122    	; 0x5ee <enu_SetSenseLevel+0xa4>
     574:	2c 81       	ldd	r18, Y+4	; 0x04
     576:	3d 81       	ldd	r19, Y+5	; 0x05
     578:	22 30       	cpi	r18, 0x02	; 2
     57a:	31 05       	cpc	r19, r1
     57c:	09 f4       	brne	.+2      	; 0x580 <enu_SetSenseLevel+0x36>
     57e:	69 c0       	rjmp	.+210    	; 0x652 <enu_SetSenseLevel+0x108>
     580:	8c 81       	ldd	r24, Y+4	; 0x04
     582:	9d 81       	ldd	r25, Y+5	; 0x05
     584:	00 97       	sbiw	r24, 0x00	; 0
     586:	09 f0       	breq	.+2      	; 0x58a <enu_SetSenseLevel+0x40>
     588:	7c c0       	rjmp	.+248    	; 0x682 <enu_SetSenseLevel+0x138>
    {
    case EXTI_INT0:
    {   
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC00);
     58a:	a5 e5       	ldi	r26, 0x55	; 85
     58c:	b0 e0       	ldi	r27, 0x00	; 0
     58e:	e5 e5       	ldi	r30, 0x55	; 85
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	80 81       	ld	r24, Z
     594:	8c 7f       	andi	r24, 0xFC	; 252
     596:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
     598:	8b 81       	ldd	r24, Y+3	; 0x03
     59a:	88 23       	and	r24, r24
     59c:	11 f4       	brne	.+4      	; 0x5a2 <enu_SetSenseLevel+0x58>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
     59e:	19 82       	std	Y+1, r1	; 0x01
     5a0:	72 c0       	rjmp	.+228    	; 0x686 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
     5a2:	8b 81       	ldd	r24, Y+3	; 0x03
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	49 f4       	brne	.+18     	; 0x5ba <enu_SetSenseLevel+0x70>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC00);
     5a8:	a5 e5       	ldi	r26, 0x55	; 85
     5aa:	b0 e0       	ldi	r27, 0x00	; 0
     5ac:	e5 e5       	ldi	r30, 0x55	; 85
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	80 81       	ld	r24, Z
     5b2:	81 60       	ori	r24, 0x01	; 1
     5b4:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
     5b6:	19 82       	std	Y+1, r1	; 0x01
     5b8:	66 c0       	rjmp	.+204    	; 0x686 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
     5ba:	8b 81       	ldd	r24, Y+3	; 0x03
     5bc:	82 30       	cpi	r24, 0x02	; 2
     5be:	41 f4       	brne	.+16     	; 0x5d0 <enu_SetSenseLevel+0x86>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC01);
     5c0:	a5 e5       	ldi	r26, 0x55	; 85
     5c2:	b0 e0       	ldi	r27, 0x00	; 0
     5c4:	e5 e5       	ldi	r30, 0x55	; 85
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	80 81       	ld	r24, Z
     5ca:	82 60       	ori	r24, 0x02	; 2
     5cc:	8c 93       	st	X, r24
     5ce:	5b c0       	rjmp	.+182    	; 0x686 <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
     5d0:	8b 81       	ldd	r24, Y+3	; 0x03
     5d2:	83 30       	cpi	r24, 0x03	; 3
     5d4:	49 f4       	brne	.+18     	; 0x5e8 <enu_SetSenseLevel+0x9e>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC00);
     5d6:	a5 e5       	ldi	r26, 0x55	; 85
     5d8:	b0 e0       	ldi	r27, 0x00	; 0
     5da:	e5 e5       	ldi	r30, 0x55	; 85
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 81       	ld	r24, Z
     5e0:	83 60       	ori	r24, 0x03	; 3
     5e2:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
     5e4:	19 82       	std	Y+1, r1	; 0x01
     5e6:	4f c0       	rjmp	.+158    	; 0x686 <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	89 83       	std	Y+1, r24	; 0x01
     5ec:	4c c0       	rjmp	.+152    	; 0x686 <enu_SetSenseLevel+0x13c>
    }

    case EXTI_INT1:
    {
        //Clearing both bits
        MCUCR &= ~( 3 << MCUCR_ISC10);
     5ee:	a5 e5       	ldi	r26, 0x55	; 85
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	e5 e5       	ldi	r30, 0x55	; 85
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	83 7f       	andi	r24, 0xF3	; 243
     5fa:	8c 93       	st	X, r24

        if(Copy_u8_SenseLevel == EXTI_LOW_LEVEL)
     5fc:	8b 81       	ldd	r24, Y+3	; 0x03
     5fe:	88 23       	and	r24, r24
     600:	11 f4       	brne	.+4      	; 0x606 <enu_SetSenseLevel+0xbc>
        {
            //Bits already contain 00
            Local_u8_ErrorFlag = ES_OK;
     602:	19 82       	std	Y+1, r1	; 0x01
     604:	40 c0       	rjmp	.+128    	; 0x686 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_LOGICAL_CHANGE)
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	81 30       	cpi	r24, 0x01	; 1
     60a:	49 f4       	brne	.+18     	; 0x61e <enu_SetSenseLevel+0xd4>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC10);
     60c:	a5 e5       	ldi	r26, 0x55	; 85
     60e:	b0 e0       	ldi	r27, 0x00	; 0
     610:	e5 e5       	ldi	r30, 0x55	; 85
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	84 60       	ori	r24, 0x04	; 4
     618:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
     61a:	19 82       	std	Y+1, r1	; 0x01
     61c:	34 c0       	rjmp	.+104    	; 0x686 <enu_SetSenseLevel+0x13c>
        }
        else if (Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
     61e:	8b 81       	ldd	r24, Y+3	; 0x03
     620:	82 30       	cpi	r24, 0x02	; 2
     622:	41 f4       	brne	.+16     	; 0x634 <enu_SetSenseLevel+0xea>
        {
            //Bits contain 01
            MCUCR |= ( 1 << MCUCR_ISC11);
     624:	a5 e5       	ldi	r26, 0x55	; 85
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	e5 e5       	ldi	r30, 0x55	; 85
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	88 60       	ori	r24, 0x08	; 8
     630:	8c 93       	st	X, r24
     632:	29 c0       	rjmp	.+82     	; 0x686 <enu_SetSenseLevel+0x13c>

        }
        else if (Copy_u8_SenseLevel == EXTI_RISING_EDGE)
     634:	8b 81       	ldd	r24, Y+3	; 0x03
     636:	83 30       	cpi	r24, 0x03	; 3
     638:	49 f4       	brne	.+18     	; 0x64c <enu_SetSenseLevel+0x102>
        {
            //Bits contain 11
            MCUCR |= ( 3 << MCUCR_ISC10);
     63a:	a5 e5       	ldi	r26, 0x55	; 85
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	e5 e5       	ldi	r30, 0x55	; 85
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	8c 60       	ori	r24, 0x0C	; 12
     646:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
     648:	19 82       	std	Y+1, r1	; 0x01
     64a:	1d c0       	rjmp	.+58     	; 0x686 <enu_SetSenseLevel+0x13c>
        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	89 83       	std	Y+1, r24	; 0x01
     650:	1a c0       	rjmp	.+52     	; 0x686 <enu_SetSenseLevel+0x13c>
        break;
    }

    case EXTI_INT2:
    {
        if(Copy_u8_SenseLevel == EXTI_FALLING_EDGE)
     652:	8b 81       	ldd	r24, Y+3	; 0x03
     654:	82 30       	cpi	r24, 0x02	; 2
     656:	49 f4       	brne	.+18     	; 0x66a <enu_SetSenseLevel+0x120>
        {
            //Bit contains 0
            MCUCSR &= ~(1 << MCUCSR_ISC2);
     658:	a4 e5       	ldi	r26, 0x54	; 84
     65a:	b0 e0       	ldi	r27, 0x00	; 0
     65c:	e4 e5       	ldi	r30, 0x54	; 84
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	8f 7b       	andi	r24, 0xBF	; 191
     664:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
     666:	19 82       	std	Y+1, r1	; 0x01
     668:	0e c0       	rjmp	.+28     	; 0x686 <enu_SetSenseLevel+0x13c>
        }
        else if ( Copy_u8_SenseLevel == EXTI_RISING_EDGE)
     66a:	8b 81       	ldd	r24, Y+3	; 0x03
     66c:	83 30       	cpi	r24, 0x03	; 3
     66e:	59 f4       	brne	.+22     	; 0x686 <enu_SetSenseLevel+0x13c>
        {
            //Bit contains 1
            MCUCSR |= (1 << MCUCSR_ISC2);
     670:	a4 e5       	ldi	r26, 0x54	; 84
     672:	b0 e0       	ldi	r27, 0x00	; 0
     674:	e4 e5       	ldi	r30, 0x54	; 84
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 81       	ld	r24, Z
     67a:	80 64       	ori	r24, 0x40	; 64
     67c:	8c 93       	st	X, r24

            Local_u8_ErrorFlag = ES_OK;
     67e:	19 82       	std	Y+1, r1	; 0x01
     680:	02 c0       	rjmp	.+4      	; 0x686 <enu_SetSenseLevel+0x13c>
        break;
    }
    
    default:
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    }


    return Local_u8_ErrorFlag;
     686:	89 81       	ldd	r24, Y+1	; 0x01
}
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	cf 91       	pop	r28
     694:	df 91       	pop	r29
     696:	08 95       	ret

00000698 <enu_SetFlagValue>:

static ErrorState_t enu_SetFlagValue(u8 Copy_u8_INTNumber, u8 Copy_u8_Value)
{
     698:	df 93       	push	r29
     69a:	cf 93       	push	r28
     69c:	00 d0       	rcall	.+0      	; 0x69e <enu_SetFlagValue+0x6>
     69e:	00 d0       	rcall	.+0      	; 0x6a0 <enu_SetFlagValue+0x8>
     6a0:	0f 92       	push	r0
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	8a 83       	std	Y+2, r24	; 0x02
     6a8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	89 83       	std	Y+1, r24	; 0x01

    switch (Copy_u8_INTNumber)
     6ae:	8a 81       	ldd	r24, Y+2	; 0x02
     6b0:	28 2f       	mov	r18, r24
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	3d 83       	std	Y+5, r19	; 0x05
     6b6:	2c 83       	std	Y+4, r18	; 0x04
     6b8:	8c 81       	ldd	r24, Y+4	; 0x04
     6ba:	9d 81       	ldd	r25, Y+5	; 0x05
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	91 05       	cpc	r25, r1
     6c0:	29 f1       	breq	.+74     	; 0x70c <enu_SetFlagValue+0x74>
     6c2:	2c 81       	ldd	r18, Y+4	; 0x04
     6c4:	3d 81       	ldd	r19, Y+5	; 0x05
     6c6:	22 30       	cpi	r18, 0x02	; 2
     6c8:	31 05       	cpc	r19, r1
     6ca:	d9 f1       	breq	.+118    	; 0x742 <enu_SetFlagValue+0xaa>
     6cc:	8c 81       	ldd	r24, Y+4	; 0x04
     6ce:	9d 81       	ldd	r25, Y+5	; 0x05
     6d0:	00 97       	sbiw	r24, 0x00	; 0
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <enu_SetFlagValue+0x3e>
     6d4:	51 c0       	rjmp	.+162    	; 0x778 <enu_SetFlagValue+0xe0>
    {
        case EXTI_INT0:
        {   
            if (Copy_u8_Value == EXTI_HIGH)
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	81 30       	cpi	r24, 0x01	; 1
     6da:	49 f4       	brne	.+18     	; 0x6ee <enu_SetFlagValue+0x56>
            {
                GIFR |= ( 1 << GIFR_INTF0);
     6dc:	aa e5       	ldi	r26, 0x5A	; 90
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	ea e5       	ldi	r30, 0x5A	; 90
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	80 64       	ori	r24, 0x40	; 64
     6e8:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
     6ea:	19 82       	std	Y+1, r1	; 0x01
     6ec:	47 c0       	rjmp	.+142    	; 0x77c <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	88 23       	and	r24, r24
     6f2:	49 f4       	brne	.+18     	; 0x706 <enu_SetFlagValue+0x6e>
            {
                GIFR &= ~( 1 << GIFR_INTF0);
     6f4:	aa e5       	ldi	r26, 0x5A	; 90
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	ea e5       	ldi	r30, 0x5A	; 90
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	80 81       	ld	r24, Z
     6fe:	8f 7b       	andi	r24, 0xBF	; 191
     700:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
     702:	19 82       	std	Y+1, r1	; 0x01
     704:	3b c0       	rjmp	.+118    	; 0x77c <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     706:	82 e0       	ldi	r24, 0x02	; 2
     708:	89 83       	std	Y+1, r24	; 0x01
     70a:	38 c0       	rjmp	.+112    	; 0x77c <enu_SetFlagValue+0xe4>
            break;
        }

        case EXTI_INT1:
        {
            if (Copy_u8_Value == EXTI_HIGH)
     70c:	8b 81       	ldd	r24, Y+3	; 0x03
     70e:	81 30       	cpi	r24, 0x01	; 1
     710:	49 f4       	brne	.+18     	; 0x724 <enu_SetFlagValue+0x8c>
            {
                GIFR |= ( 1 << GIFR_INTF1);
     712:	aa e5       	ldi	r26, 0x5A	; 90
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	ea e5       	ldi	r30, 0x5A	; 90
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	80 68       	ori	r24, 0x80	; 128
     71e:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
     720:	19 82       	std	Y+1, r1	; 0x01
     722:	2c c0       	rjmp	.+88     	; 0x77c <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
     724:	8b 81       	ldd	r24, Y+3	; 0x03
     726:	88 23       	and	r24, r24
     728:	49 f4       	brne	.+18     	; 0x73c <enu_SetFlagValue+0xa4>
            {
                GIFR &= ~( 1 << GIFR_INTF1);
     72a:	aa e5       	ldi	r26, 0x5A	; 90
     72c:	b0 e0       	ldi	r27, 0x00	; 0
     72e:	ea e5       	ldi	r30, 0x5A	; 90
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	80 81       	ld	r24, Z
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
     738:	19 82       	std	Y+1, r1	; 0x01
     73a:	20 c0       	rjmp	.+64     	; 0x77c <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	89 83       	std	Y+1, r24	; 0x01
     740:	1d c0       	rjmp	.+58     	; 0x77c <enu_SetFlagValue+0xe4>
            
            break;
        }
        case EXTI_INT2:
        {
            if (Copy_u8_Value == EXTI_HIGH)
     742:	8b 81       	ldd	r24, Y+3	; 0x03
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	49 f4       	brne	.+18     	; 0x75a <enu_SetFlagValue+0xc2>
            {
                GIFR |= ( 1 << GIFR_INTF2);
     748:	aa e5       	ldi	r26, 0x5A	; 90
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	ea e5       	ldi	r30, 0x5A	; 90
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	80 81       	ld	r24, Z
     752:	80 62       	ori	r24, 0x20	; 32
     754:	8c 93       	st	X, r24
                
                Local_u8_ErrorFlag = ES_OK;
     756:	19 82       	std	Y+1, r1	; 0x01
     758:	11 c0       	rjmp	.+34     	; 0x77c <enu_SetFlagValue+0xe4>
            }
            else if (Copy_u8_Value == EXTI_LOW)
     75a:	8b 81       	ldd	r24, Y+3	; 0x03
     75c:	88 23       	and	r24, r24
     75e:	49 f4       	brne	.+18     	; 0x772 <enu_SetFlagValue+0xda>
            {
                GIFR &= ~( 1 << GIFR_INTF2);
     760:	aa e5       	ldi	r26, 0x5A	; 90
     762:	b0 e0       	ldi	r27, 0x00	; 0
     764:	ea e5       	ldi	r30, 0x5A	; 90
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 81       	ld	r24, Z
     76a:	8f 7d       	andi	r24, 0xDF	; 223
     76c:	8c 93       	st	X, r24

                Local_u8_ErrorFlag = ES_OK;
     76e:	19 82       	std	Y+1, r1	; 0x01
     770:	05 c0       	rjmp	.+10     	; 0x77c <enu_SetFlagValue+0xe4>
            }
            else
            {
                Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	02 c0       	rjmp	.+4      	; 0x77c <enu_SetFlagValue+0xe4>

            break;
        }
    
        default:
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }


    return Local_u8_ErrorFlag;     
     77c:	89 81       	ldd	r24, Y+1	; 0x01
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	cf 91       	pop	r28
     78a:	df 91       	pop	r29
     78c:	08 95       	ret

0000078e <DIO_enu_Initialization>:
#include "DIO_Private.h"


//Functions' implementation
extern ErrorState_t DIO_enu_Initialization(void)
{
     78e:	df 93       	push	r29
     790:	cf 93       	push	r28
     792:	0f 92       	push	r0
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	89 83       	std	Y+1, r24	; 0x01


    Local_u8_ErrorFlag = ES_OK;
     79c:	19 82       	std	Y+1, r1	; 0x01

    return Local_u8_ErrorFlag;
     79e:	89 81       	ldd	r24, Y+1	; 0x01
}
     7a0:	0f 90       	pop	r0
     7a2:	cf 91       	pop	r28
     7a4:	df 91       	pop	r29
     7a6:	08 95       	ret

000007a8 <DIO_enu_SetPinDiretion>:

extern ErrorState_t DIO_enu_SetPinDiretion(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinDirection)
{
     7a8:	df 93       	push	r29
     7aa:	cf 93       	push	r28
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <DIO_enu_SetPinDiretion+0x6>
     7ae:	00 d0       	rcall	.+0      	; 0x7b0 <DIO_enu_SetPinDiretion+0x8>
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <DIO_enu_SetPinDiretion+0xa>
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	8a 83       	std	Y+2, r24	; 0x02
     7b8:	6b 83       	std	Y+3, r22	; 0x03
     7ba:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinDirection <= DIO_PIN_WRITE) )
     7c0:	8a 81       	ldd	r24, Y+2	; 0x02
     7c2:	84 30       	cpi	r24, 0x04	; 4
     7c4:	08 f0       	brcs	.+2      	; 0x7c8 <DIO_enu_SetPinDiretion+0x20>
     7c6:	d0 c0       	rjmp	.+416    	; 0x968 <__stack+0x109>
     7c8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ca:	88 30       	cpi	r24, 0x08	; 8
     7cc:	08 f0       	brcs	.+2      	; 0x7d0 <DIO_enu_SetPinDiretion+0x28>
     7ce:	cc c0       	rjmp	.+408    	; 0x968 <__stack+0x109>
     7d0:	8c 81       	ldd	r24, Y+4	; 0x04
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	08 f0       	brcs	.+2      	; 0x7d8 <DIO_enu_SetPinDiretion+0x30>
     7d6:	c8 c0       	rjmp	.+400    	; 0x968 <__stack+0x109>
    {
        switch (Copy_u8_PinGroup)
     7d8:	8a 81       	ldd	r24, Y+2	; 0x02
     7da:	28 2f       	mov	r18, r24
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	3e 83       	std	Y+6, r19	; 0x06
     7e0:	2d 83       	std	Y+5, r18	; 0x05
     7e2:	6d 81       	ldd	r22, Y+5	; 0x05
     7e4:	7e 81       	ldd	r23, Y+6	; 0x06
     7e6:	61 30       	cpi	r22, 0x01	; 1
     7e8:	71 05       	cpc	r23, r1
     7ea:	09 f4       	brne	.+2      	; 0x7ee <DIO_enu_SetPinDiretion+0x46>
     7ec:	41 c0       	rjmp	.+130    	; 0x870 <__stack+0x11>
     7ee:	8d 81       	ldd	r24, Y+5	; 0x05
     7f0:	9e 81       	ldd	r25, Y+6	; 0x06
     7f2:	82 30       	cpi	r24, 0x02	; 2
     7f4:	91 05       	cpc	r25, r1
     7f6:	34 f4       	brge	.+12     	; 0x804 <DIO_enu_SetPinDiretion+0x5c>
     7f8:	2d 81       	ldd	r18, Y+5	; 0x05
     7fa:	3e 81       	ldd	r19, Y+6	; 0x06
     7fc:	21 15       	cp	r18, r1
     7fe:	31 05       	cpc	r19, r1
     800:	71 f0       	breq	.+28     	; 0x81e <DIO_enu_SetPinDiretion+0x76>
     802:	b0 c0       	rjmp	.+352    	; 0x964 <__stack+0x105>
     804:	6d 81       	ldd	r22, Y+5	; 0x05
     806:	7e 81       	ldd	r23, Y+6	; 0x06
     808:	62 30       	cpi	r22, 0x02	; 2
     80a:	71 05       	cpc	r23, r1
     80c:	09 f4       	brne	.+2      	; 0x810 <DIO_enu_SetPinDiretion+0x68>
     80e:	59 c0       	rjmp	.+178    	; 0x8c2 <__stack+0x63>
     810:	8d 81       	ldd	r24, Y+5	; 0x05
     812:	9e 81       	ldd	r25, Y+6	; 0x06
     814:	83 30       	cpi	r24, 0x03	; 3
     816:	91 05       	cpc	r25, r1
     818:	09 f4       	brne	.+2      	; 0x81c <DIO_enu_SetPinDiretion+0x74>
     81a:	7c c0       	rjmp	.+248    	; 0x914 <__stack+0xb5>
     81c:	a3 c0       	rjmp	.+326    	; 0x964 <__stack+0x105>
        {
            case DIO_PIN_GROUP_A:

            //Masking the bit
            DIO_DDRA &= ~( 1 << Copy_u8_PinNumber );
     81e:	aa e3       	ldi	r26, 0x3A	; 58
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	ea e3       	ldi	r30, 0x3A	; 58
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	80 81       	ld	r24, Z
     828:	48 2f       	mov	r20, r24
     82a:	8b 81       	ldd	r24, Y+3	; 0x03
     82c:	28 2f       	mov	r18, r24
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	02 c0       	rjmp	.+4      	; 0x83a <DIO_enu_SetPinDiretion+0x92>
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	2a 95       	dec	r18
     83c:	e2 f7       	brpl	.-8      	; 0x836 <DIO_enu_SetPinDiretion+0x8e>
     83e:	80 95       	com	r24
     840:	84 23       	and	r24, r20
     842:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRA |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
     844:	aa e3       	ldi	r26, 0x3A	; 58
     846:	b0 e0       	ldi	r27, 0x00	; 0
     848:	ea e3       	ldi	r30, 0x3A	; 58
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	48 2f       	mov	r20, r24
     850:	8c 81       	ldd	r24, Y+4	; 0x04
     852:	28 2f       	mov	r18, r24
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	8b 81       	ldd	r24, Y+3	; 0x03
     858:	88 2f       	mov	r24, r24
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	b9 01       	movw	r22, r18
     85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
     860:	66 0f       	add	r22, r22
     862:	77 1f       	adc	r23, r23
     864:	8a 95       	dec	r24
     866:	e2 f7       	brpl	.-8      	; 0x860 <__stack+0x1>
     868:	cb 01       	movw	r24, r22
     86a:	84 2b       	or	r24, r20
     86c:	8c 93       	st	X, r24
     86e:	7a c0       	rjmp	.+244    	; 0x964 <__stack+0x105>
            break;

            case DIO_PIN_GROUP_B:
            //Masking the bit
            DIO_DDRB &= ~( 1 << Copy_u8_PinNumber);
     870:	a7 e3       	ldi	r26, 0x37	; 55
     872:	b0 e0       	ldi	r27, 0x00	; 0
     874:	e7 e3       	ldi	r30, 0x37	; 55
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	80 81       	ld	r24, Z
     87a:	48 2f       	mov	r20, r24
     87c:	8b 81       	ldd	r24, Y+3	; 0x03
     87e:	28 2f       	mov	r18, r24
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
     888:	88 0f       	add	r24, r24
     88a:	99 1f       	adc	r25, r25
     88c:	2a 95       	dec	r18
     88e:	e2 f7       	brpl	.-8      	; 0x888 <__stack+0x29>
     890:	80 95       	com	r24
     892:	84 23       	and	r24, r20
     894:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRB |= ( Copy_u8_PinDirection << Copy_u8_PinNumber );
     896:	a7 e3       	ldi	r26, 0x37	; 55
     898:	b0 e0       	ldi	r27, 0x00	; 0
     89a:	e7 e3       	ldi	r30, 0x37	; 55
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	48 2f       	mov	r20, r24
     8a2:	8c 81       	ldd	r24, Y+4	; 0x04
     8a4:	28 2f       	mov	r18, r24
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
     8aa:	88 2f       	mov	r24, r24
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	b9 01       	movw	r22, r18
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <__stack+0x57>
     8b2:	66 0f       	add	r22, r22
     8b4:	77 1f       	adc	r23, r23
     8b6:	8a 95       	dec	r24
     8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <__stack+0x53>
     8ba:	cb 01       	movw	r24, r22
     8bc:	84 2b       	or	r24, r20
     8be:	8c 93       	st	X, r24
     8c0:	51 c0       	rjmp	.+162    	; 0x964 <__stack+0x105>
            break;

            case DIO_PIN_GROUP_C:
            //Masking the bit
            DIO_DDRC &= ~( 1 << Copy_u8_PinNumber);
     8c2:	a4 e3       	ldi	r26, 0x34	; 52
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	e4 e3       	ldi	r30, 0x34	; 52
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	80 81       	ld	r24, Z
     8cc:	48 2f       	mov	r20, r24
     8ce:	8b 81       	ldd	r24, Y+3	; 0x03
     8d0:	28 2f       	mov	r18, r24
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <__stack+0x7f>
     8da:	88 0f       	add	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	2a 95       	dec	r18
     8e0:	e2 f7       	brpl	.-8      	; 0x8da <__stack+0x7b>
     8e2:	80 95       	com	r24
     8e4:	84 23       	and	r24, r20
     8e6:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRC |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
     8e8:	a4 e3       	ldi	r26, 0x34	; 52
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	e4 e3       	ldi	r30, 0x34	; 52
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	48 2f       	mov	r20, r24
     8f4:	8c 81       	ldd	r24, Y+4	; 0x04
     8f6:	28 2f       	mov	r18, r24
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	8b 81       	ldd	r24, Y+3	; 0x03
     8fc:	88 2f       	mov	r24, r24
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	b9 01       	movw	r22, r18
     902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0xa9>
     904:	66 0f       	add	r22, r22
     906:	77 1f       	adc	r23, r23
     908:	8a 95       	dec	r24
     90a:	e2 f7       	brpl	.-8      	; 0x904 <__stack+0xa5>
     90c:	cb 01       	movw	r24, r22
     90e:	84 2b       	or	r24, r20
     910:	8c 93       	st	X, r24
     912:	28 c0       	rjmp	.+80     	; 0x964 <__stack+0x105>
            break;

            case DIO_PIN_GROUP_D:
            //Masking the bit
            DIO_DDRD &= ~( 1 << Copy_u8_PinNumber);
     914:	a1 e3       	ldi	r26, 0x31	; 49
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	e1 e3       	ldi	r30, 0x31	; 49
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	48 2f       	mov	r20, r24
     920:	8b 81       	ldd	r24, Y+3	; 0x03
     922:	28 2f       	mov	r18, r24
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0xd1>
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	2a 95       	dec	r18
     932:	e2 f7       	brpl	.-8      	; 0x92c <__stack+0xcd>
     934:	80 95       	com	r24
     936:	84 23       	and	r24, r20
     938:	8c 93       	st	X, r24
            //Placing the Pin Direction Value
            DIO_DDRD |= ( Copy_u8_PinDirection << Copy_u8_PinNumber);
     93a:	a1 e3       	ldi	r26, 0x31	; 49
     93c:	b0 e0       	ldi	r27, 0x00	; 0
     93e:	e1 e3       	ldi	r30, 0x31	; 49
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	48 2f       	mov	r20, r24
     946:	8c 81       	ldd	r24, Y+4	; 0x04
     948:	28 2f       	mov	r18, r24
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	8b 81       	ldd	r24, Y+3	; 0x03
     94e:	88 2f       	mov	r24, r24
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	b9 01       	movw	r22, r18
     954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0xfb>
     956:	66 0f       	add	r22, r22
     958:	77 1f       	adc	r23, r23
     95a:	8a 95       	dec	r24
     95c:	e2 f7       	brpl	.-8      	; 0x956 <__stack+0xf7>
     95e:	cb 01       	movw	r24, r22
     960:	84 2b       	or	r24, r20
     962:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     964:	19 82       	std	Y+1, r1	; 0x01
     966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x10d>

    }
    else
    {
        Local_u8_ErrorFlag =ES_OUT_OF_RANGE;
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
     96c:	89 81       	ldd	r24, Y+1	; 0x01
}
     96e:	26 96       	adiw	r28, 0x06	; 6
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	f8 94       	cli
     974:	de bf       	out	0x3e, r29	; 62
     976:	0f be       	out	0x3f, r0	; 63
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	cf 91       	pop	r28
     97c:	df 91       	pop	r29
     97e:	08 95       	ret

00000980 <DIO_enu_SetPinState>:

extern ErrorState_t DIO_enu_SetPinState(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinState)
{
     980:	df 93       	push	r29
     982:	cf 93       	push	r28
     984:	00 d0       	rcall	.+0      	; 0x986 <DIO_enu_SetPinState+0x6>
     986:	00 d0       	rcall	.+0      	; 0x988 <DIO_enu_SetPinState+0x8>
     988:	00 d0       	rcall	.+0      	; 0x98a <DIO_enu_SetPinState+0xa>
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	8a 83       	std	Y+2, r24	; 0x02
     990:	6b 83       	std	Y+3, r22	; 0x03
     992:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7) && (Copy_u8_PinState <= DIO_PULL_UP))
     998:	8a 81       	ldd	r24, Y+2	; 0x02
     99a:	84 30       	cpi	r24, 0x04	; 4
     99c:	08 f0       	brcs	.+2      	; 0x9a0 <DIO_enu_SetPinState+0x20>
     99e:	d0 c0       	rjmp	.+416    	; 0xb40 <DIO_enu_SetPinState+0x1c0>
     9a0:	8b 81       	ldd	r24, Y+3	; 0x03
     9a2:	88 30       	cpi	r24, 0x08	; 8
     9a4:	08 f0       	brcs	.+2      	; 0x9a8 <DIO_enu_SetPinState+0x28>
     9a6:	cc c0       	rjmp	.+408    	; 0xb40 <DIO_enu_SetPinState+0x1c0>
     9a8:	8c 81       	ldd	r24, Y+4	; 0x04
     9aa:	82 30       	cpi	r24, 0x02	; 2
     9ac:	08 f0       	brcs	.+2      	; 0x9b0 <DIO_enu_SetPinState+0x30>
     9ae:	c8 c0       	rjmp	.+400    	; 0xb40 <DIO_enu_SetPinState+0x1c0>
    {
        switch (Copy_u8_PinGroup)
     9b0:	8a 81       	ldd	r24, Y+2	; 0x02
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	3e 83       	std	Y+6, r19	; 0x06
     9b8:	2d 83       	std	Y+5, r18	; 0x05
     9ba:	6d 81       	ldd	r22, Y+5	; 0x05
     9bc:	7e 81       	ldd	r23, Y+6	; 0x06
     9be:	61 30       	cpi	r22, 0x01	; 1
     9c0:	71 05       	cpc	r23, r1
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <DIO_enu_SetPinState+0x46>
     9c4:	41 c0       	rjmp	.+130    	; 0xa48 <DIO_enu_SetPinState+0xc8>
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	9e 81       	ldd	r25, Y+6	; 0x06
     9ca:	82 30       	cpi	r24, 0x02	; 2
     9cc:	91 05       	cpc	r25, r1
     9ce:	34 f4       	brge	.+12     	; 0x9dc <DIO_enu_SetPinState+0x5c>
     9d0:	2d 81       	ldd	r18, Y+5	; 0x05
     9d2:	3e 81       	ldd	r19, Y+6	; 0x06
     9d4:	21 15       	cp	r18, r1
     9d6:	31 05       	cpc	r19, r1
     9d8:	71 f0       	breq	.+28     	; 0x9f6 <DIO_enu_SetPinState+0x76>
     9da:	b0 c0       	rjmp	.+352    	; 0xb3c <DIO_enu_SetPinState+0x1bc>
     9dc:	6d 81       	ldd	r22, Y+5	; 0x05
     9de:	7e 81       	ldd	r23, Y+6	; 0x06
     9e0:	62 30       	cpi	r22, 0x02	; 2
     9e2:	71 05       	cpc	r23, r1
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <DIO_enu_SetPinState+0x68>
     9e6:	59 c0       	rjmp	.+178    	; 0xa9a <DIO_enu_SetPinState+0x11a>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	9e 81       	ldd	r25, Y+6	; 0x06
     9ec:	83 30       	cpi	r24, 0x03	; 3
     9ee:	91 05       	cpc	r25, r1
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <DIO_enu_SetPinState+0x74>
     9f2:	7c c0       	rjmp	.+248    	; 0xaec <DIO_enu_SetPinState+0x16c>
     9f4:	a3 c0       	rjmp	.+326    	; 0xb3c <DIO_enu_SetPinState+0x1bc>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA &= ~( 1 << Copy_u8_PinNumber);
     9f6:	ab e3       	ldi	r26, 0x3B	; 59
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
     9fa:	eb e3       	ldi	r30, 0x3B	; 59
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 81       	ld	r24, Z
     a00:	48 2f       	mov	r20, r24
     a02:	8b 81       	ldd	r24, Y+3	; 0x03
     a04:	28 2f       	mov	r18, r24
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <DIO_enu_SetPinState+0x92>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	2a 95       	dec	r18
     a14:	e2 f7       	brpl	.-8      	; 0xa0e <DIO_enu_SetPinState+0x8e>
     a16:	80 95       	com	r24
     a18:	84 23       	and	r24, r20
     a1a:	8c 93       	st	X, r24
            DIO_PORTA |= ( Copy_u8_PinState << Copy_u8_PinNumber);
     a1c:	ab e3       	ldi	r26, 0x3B	; 59
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	eb e3       	ldi	r30, 0x3B	; 59
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	48 2f       	mov	r20, r24
     a28:	8c 81       	ldd	r24, Y+4	; 0x04
     a2a:	28 2f       	mov	r18, r24
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	8b 81       	ldd	r24, Y+3	; 0x03
     a30:	88 2f       	mov	r24, r24
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	b9 01       	movw	r22, r18
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <DIO_enu_SetPinState+0xbc>
     a38:	66 0f       	add	r22, r22
     a3a:	77 1f       	adc	r23, r23
     a3c:	8a 95       	dec	r24
     a3e:	e2 f7       	brpl	.-8      	; 0xa38 <DIO_enu_SetPinState+0xb8>
     a40:	cb 01       	movw	r24, r22
     a42:	84 2b       	or	r24, r20
     a44:	8c 93       	st	X, r24
     a46:	7a c0       	rjmp	.+244    	; 0xb3c <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB &= ~( 1 << Copy_u8_PinNumber);
     a48:	a8 e3       	ldi	r26, 0x38	; 56
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	e8 e3       	ldi	r30, 0x38	; 56
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	48 2f       	mov	r20, r24
     a54:	8b 81       	ldd	r24, Y+3	; 0x03
     a56:	28 2f       	mov	r18, r24
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <DIO_enu_SetPinState+0xe4>
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	2a 95       	dec	r18
     a66:	e2 f7       	brpl	.-8      	; 0xa60 <DIO_enu_SetPinState+0xe0>
     a68:	80 95       	com	r24
     a6a:	84 23       	and	r24, r20
     a6c:	8c 93       	st	X, r24
            DIO_PORTB |= ( Copy_u8_PinState << Copy_u8_PinNumber);
     a6e:	a8 e3       	ldi	r26, 0x38	; 56
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	e8 e3       	ldi	r30, 0x38	; 56
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	48 2f       	mov	r20, r24
     a7a:	8c 81       	ldd	r24, Y+4	; 0x04
     a7c:	28 2f       	mov	r18, r24
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	8b 81       	ldd	r24, Y+3	; 0x03
     a82:	88 2f       	mov	r24, r24
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	b9 01       	movw	r22, r18
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <DIO_enu_SetPinState+0x10e>
     a8a:	66 0f       	add	r22, r22
     a8c:	77 1f       	adc	r23, r23
     a8e:	8a 95       	dec	r24
     a90:	e2 f7       	brpl	.-8      	; 0xa8a <DIO_enu_SetPinState+0x10a>
     a92:	cb 01       	movw	r24, r22
     a94:	84 2b       	or	r24, r20
     a96:	8c 93       	st	X, r24
     a98:	51 c0       	rjmp	.+162    	; 0xb3c <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC &= ~( 1 << Copy_u8_PinNumber);
     a9a:	a5 e3       	ldi	r26, 0x35	; 53
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e5 e3       	ldi	r30, 0x35	; 53
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	48 2f       	mov	r20, r24
     aa6:	8b 81       	ldd	r24, Y+3	; 0x03
     aa8:	28 2f       	mov	r18, r24
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <DIO_enu_SetPinState+0x136>
     ab2:	88 0f       	add	r24, r24
     ab4:	99 1f       	adc	r25, r25
     ab6:	2a 95       	dec	r18
     ab8:	e2 f7       	brpl	.-8      	; 0xab2 <DIO_enu_SetPinState+0x132>
     aba:	80 95       	com	r24
     abc:	84 23       	and	r24, r20
     abe:	8c 93       	st	X, r24
            DIO_PORTC |= ( Copy_u8_PinState << Copy_u8_PinNumber);
     ac0:	a5 e3       	ldi	r26, 0x35	; 53
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	e5 e3       	ldi	r30, 0x35	; 53
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	48 2f       	mov	r20, r24
     acc:	8c 81       	ldd	r24, Y+4	; 0x04
     ace:	28 2f       	mov	r18, r24
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	8b 81       	ldd	r24, Y+3	; 0x03
     ad4:	88 2f       	mov	r24, r24
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	b9 01       	movw	r22, r18
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <DIO_enu_SetPinState+0x160>
     adc:	66 0f       	add	r22, r22
     ade:	77 1f       	adc	r23, r23
     ae0:	8a 95       	dec	r24
     ae2:	e2 f7       	brpl	.-8      	; 0xadc <DIO_enu_SetPinState+0x15c>
     ae4:	cb 01       	movw	r24, r22
     ae6:	84 2b       	or	r24, r20
     ae8:	8c 93       	st	X, r24
     aea:	28 c0       	rjmp	.+80     	; 0xb3c <DIO_enu_SetPinState+0x1bc>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD &= ~( 1 << Copy_u8_PinNumber);
     aec:	a2 e3       	ldi	r26, 0x32	; 50
     aee:	b0 e0       	ldi	r27, 0x00	; 0
     af0:	e2 e3       	ldi	r30, 0x32	; 50
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	48 2f       	mov	r20, r24
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	28 2f       	mov	r18, r24
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <DIO_enu_SetPinState+0x188>
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	2a 95       	dec	r18
     b0a:	e2 f7       	brpl	.-8      	; 0xb04 <DIO_enu_SetPinState+0x184>
     b0c:	80 95       	com	r24
     b0e:	84 23       	and	r24, r20
     b10:	8c 93       	st	X, r24
            DIO_PORTD |= ( Copy_u8_PinState << Copy_u8_PinNumber);
     b12:	a2 e3       	ldi	r26, 0x32	; 50
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	e2 e3       	ldi	r30, 0x32	; 50
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	48 2f       	mov	r20, r24
     b1e:	8c 81       	ldd	r24, Y+4	; 0x04
     b20:	28 2f       	mov	r18, r24
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	8b 81       	ldd	r24, Y+3	; 0x03
     b26:	88 2f       	mov	r24, r24
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	b9 01       	movw	r22, r18
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <DIO_enu_SetPinState+0x1b2>
     b2e:	66 0f       	add	r22, r22
     b30:	77 1f       	adc	r23, r23
     b32:	8a 95       	dec	r24
     b34:	e2 f7       	brpl	.-8      	; 0xb2e <DIO_enu_SetPinState+0x1ae>
     b36:	cb 01       	movw	r24, r22
     b38:	84 2b       	or	r24, r20
     b3a:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     b3c:	19 82       	std	Y+1, r1	; 0x01
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <DIO_enu_SetPinState+0x1c4>
    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
     b44:	89 81       	ldd	r24, Y+1	; 0x01
}
     b46:	26 96       	adiw	r28, 0x06	; 6
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <DIO_enu_SetPinValue>:

extern ErrorState_t DIO_enu_SetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8 Copy_u8_PinValue)
{
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <DIO_enu_SetPinValue+0x6>
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <DIO_enu_SetPinValue+0x8>
     b60:	00 d0       	rcall	.+0      	; 0xb62 <DIO_enu_SetPinValue+0xa>
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	8a 83       	std	Y+2, r24	; 0x02
     b68:	6b 83       	std	Y+3, r22	; 0x03
     b6a:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	89 83       	std	Y+1, r24	; 0x01

    if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) && (Copy_u8_PinValue <= DIO_HIGH))
     b70:	8a 81       	ldd	r24, Y+2	; 0x02
     b72:	84 30       	cpi	r24, 0x04	; 4
     b74:	08 f0       	brcs	.+2      	; 0xb78 <DIO_enu_SetPinValue+0x20>
     b76:	db c0       	rjmp	.+438    	; 0xd2e <DIO_enu_SetPinValue+0x1d6>
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	88 30       	cpi	r24, 0x08	; 8
     b7c:	08 f0       	brcs	.+2      	; 0xb80 <DIO_enu_SetPinValue+0x28>
     b7e:	d7 c0       	rjmp	.+430    	; 0xd2e <DIO_enu_SetPinValue+0x1d6>
     b80:	8c 81       	ldd	r24, Y+4	; 0x04
     b82:	82 30       	cpi	r24, 0x02	; 2
     b84:	08 f0       	brcs	.+2      	; 0xb88 <DIO_enu_SetPinValue+0x30>
     b86:	d3 c0       	rjmp	.+422    	; 0xd2e <DIO_enu_SetPinValue+0x1d6>
    {
        switch (Copy_u8_PinGroup)
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	3e 83       	std	Y+6, r19	; 0x06
     b90:	2d 83       	std	Y+5, r18	; 0x05
     b92:	8d 81       	ldd	r24, Y+5	; 0x05
     b94:	9e 81       	ldd	r25, Y+6	; 0x06
     b96:	81 30       	cpi	r24, 0x01	; 1
     b98:	91 05       	cpc	r25, r1
     b9a:	09 f4       	brne	.+2      	; 0xb9e <DIO_enu_SetPinValue+0x46>
     b9c:	43 c0       	rjmp	.+134    	; 0xc24 <DIO_enu_SetPinValue+0xcc>
     b9e:	2d 81       	ldd	r18, Y+5	; 0x05
     ba0:	3e 81       	ldd	r19, Y+6	; 0x06
     ba2:	22 30       	cpi	r18, 0x02	; 2
     ba4:	31 05       	cpc	r19, r1
     ba6:	2c f4       	brge	.+10     	; 0xbb2 <DIO_enu_SetPinValue+0x5a>
     ba8:	8d 81       	ldd	r24, Y+5	; 0x05
     baa:	9e 81       	ldd	r25, Y+6	; 0x06
     bac:	00 97       	sbiw	r24, 0x00	; 0
     bae:	71 f0       	breq	.+28     	; 0xbcc <DIO_enu_SetPinValue+0x74>
     bb0:	bc c0       	rjmp	.+376    	; 0xd2a <DIO_enu_SetPinValue+0x1d2>
     bb2:	2d 81       	ldd	r18, Y+5	; 0x05
     bb4:	3e 81       	ldd	r19, Y+6	; 0x06
     bb6:	22 30       	cpi	r18, 0x02	; 2
     bb8:	31 05       	cpc	r19, r1
     bba:	09 f4       	brne	.+2      	; 0xbbe <DIO_enu_SetPinValue+0x66>
     bbc:	5f c0       	rjmp	.+190    	; 0xc7c <DIO_enu_SetPinValue+0x124>
     bbe:	8d 81       	ldd	r24, Y+5	; 0x05
     bc0:	9e 81       	ldd	r25, Y+6	; 0x06
     bc2:	83 30       	cpi	r24, 0x03	; 3
     bc4:	91 05       	cpc	r25, r1
     bc6:	09 f4       	brne	.+2      	; 0xbca <DIO_enu_SetPinValue+0x72>
     bc8:	85 c0       	rjmp	.+266    	; 0xcd4 <DIO_enu_SetPinValue+0x17c>
     bca:	af c0       	rjmp	.+350    	; 0xd2a <DIO_enu_SetPinValue+0x1d2>
        {
            case DIO_PIN_GROUP_A:
            if(Copy_u8_PinValue == DIO_HIGH)
     bcc:	8c 81       	ldd	r24, Y+4	; 0x04
     bce:	81 30       	cpi	r24, 0x01	; 1
     bd0:	a1 f4       	brne	.+40     	; 0xbfa <DIO_enu_SetPinValue+0xa2>
            {
                DIO_PORTA |= ( 1 << Copy_u8_PinNumber );
     bd2:	ab e3       	ldi	r26, 0x3B	; 59
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	eb e3       	ldi	r30, 0x3B	; 59
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	48 2f       	mov	r20, r24
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	02 2e       	mov	r0, r18
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <DIO_enu_SetPinValue+0x98>
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	0a 94       	dec	r0
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <DIO_enu_SetPinValue+0x94>
     bf4:	84 2b       	or	r24, r20
     bf6:	8c 93       	st	X, r24
     bf8:	98 c0       	rjmp	.+304    	; 0xd2a <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTA &= ~ (1 << Copy_u8_PinNumber);
     bfa:	ab e3       	ldi	r26, 0x3B	; 59
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	eb e3       	ldi	r30, 0x3B	; 59
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	48 2f       	mov	r20, r24
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	28 2f       	mov	r18, r24
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	02 2e       	mov	r0, r18
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <DIO_enu_SetPinValue+0xc0>
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	0a 94       	dec	r0
     c1a:	e2 f7       	brpl	.-8      	; 0xc14 <DIO_enu_SetPinValue+0xbc>
     c1c:	80 95       	com	r24
     c1e:	84 23       	and	r24, r20
     c20:	8c 93       	st	X, r24
     c22:	83 c0       	rjmp	.+262    	; 0xd2a <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_B:
            if(Copy_u8_PinValue == DIO_HIGH)
     c24:	8c 81       	ldd	r24, Y+4	; 0x04
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	a1 f4       	brne	.+40     	; 0xc52 <DIO_enu_SetPinValue+0xfa>
            {
                DIO_PORTB |= ( 1 << Copy_u8_PinNumber );
     c2a:	a8 e3       	ldi	r26, 0x38	; 56
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 e3       	ldi	r30, 0x38	; 56
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	48 2f       	mov	r20, r24
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	02 2e       	mov	r0, r18
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <DIO_enu_SetPinValue+0xf0>
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	0a 94       	dec	r0
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <DIO_enu_SetPinValue+0xec>
     c4c:	84 2b       	or	r24, r20
     c4e:	8c 93       	st	X, r24
     c50:	6c c0       	rjmp	.+216    	; 0xd2a <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTB &= ~ (1 << Copy_u8_PinNumber);
     c52:	a8 e3       	ldi	r26, 0x38	; 56
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	e8 e3       	ldi	r30, 0x38	; 56
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	48 2f       	mov	r20, r24
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	02 2e       	mov	r0, r18
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <DIO_enu_SetPinValue+0x118>
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	0a 94       	dec	r0
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <DIO_enu_SetPinValue+0x114>
     c74:	80 95       	com	r24
     c76:	84 23       	and	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	57 c0       	rjmp	.+174    	; 0xd2a <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_C:
            if(Copy_u8_PinValue == DIO_HIGH)
     c7c:	8c 81       	ldd	r24, Y+4	; 0x04
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	a1 f4       	brne	.+40     	; 0xcaa <DIO_enu_SetPinValue+0x152>
            {
                DIO_PORTC |= ( 1 << Copy_u8_PinNumber );
     c82:	a5 e3       	ldi	r26, 0x35	; 53
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e5 e3       	ldi	r30, 0x35	; 53
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	48 2f       	mov	r20, r24
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	02 2e       	mov	r0, r18
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <DIO_enu_SetPinValue+0x148>
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	0a 94       	dec	r0
     ca2:	e2 f7       	brpl	.-8      	; 0xc9c <DIO_enu_SetPinValue+0x144>
     ca4:	84 2b       	or	r24, r20
     ca6:	8c 93       	st	X, r24
     ca8:	40 c0       	rjmp	.+128    	; 0xd2a <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTC &= ~ (1 << Copy_u8_PinNumber);
     caa:	a5 e3       	ldi	r26, 0x35	; 53
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e5 e3       	ldi	r30, 0x35	; 53
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	48 2f       	mov	r20, r24
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	02 2e       	mov	r0, r18
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <DIO_enu_SetPinValue+0x170>
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	0a 94       	dec	r0
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <DIO_enu_SetPinValue+0x16c>
     ccc:	80 95       	com	r24
     cce:	84 23       	and	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	2b c0       	rjmp	.+86     	; 0xd2a <DIO_enu_SetPinValue+0x1d2>
            }
            break;

            case DIO_PIN_GROUP_D:
            if(Copy_u8_PinValue == DIO_HIGH)
     cd4:	8c 81       	ldd	r24, Y+4	; 0x04
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	a1 f4       	brne	.+40     	; 0xd02 <DIO_enu_SetPinValue+0x1aa>
            {
                DIO_PORTD |= ( 1 << Copy_u8_PinNumber );
     cda:	a2 e3       	ldi	r26, 0x32	; 50
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e2 e3       	ldi	r30, 0x32	; 50
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	48 2f       	mov	r20, r24
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	02 2e       	mov	r0, r18
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <DIO_enu_SetPinValue+0x1a0>
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	0a 94       	dec	r0
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <DIO_enu_SetPinValue+0x19c>
     cfc:	84 2b       	or	r24, r20
     cfe:	8c 93       	st	X, r24
     d00:	14 c0       	rjmp	.+40     	; 0xd2a <DIO_enu_SetPinValue+0x1d2>
            }
            else
            {
                DIO_PORTD &= ~ (1 << Copy_u8_PinNumber);
     d02:	a2 e3       	ldi	r26, 0x32	; 50
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e2 e3       	ldi	r30, 0x32	; 50
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_enu_SetPinValue+0x1c8>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_enu_SetPinValue+0x1c4>
     d24:	80 95       	com	r24
     d26:	84 23       	and	r24, r20
     d28:	8c 93       	st	X, r24
            }
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     d2a:	19 82       	std	Y+1, r1	; 0x01
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <DIO_enu_SetPinValue+0x1da>


    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     d2e:	82 e0       	ldi	r24, 0x02	; 2
     d30:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
     d32:	89 81       	ldd	r24, Y+1	; 0x01
}
     d34:	26 96       	adiw	r28, 0x06	; 6
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <DIO_enu_TogglePinValue>:

extern ErrorState_t DIO_enu_TogglePinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <DIO_enu_TogglePinValue+0x6>
     d4c:	00 d0       	rcall	.+0      	; 0xd4e <DIO_enu_TogglePinValue+0x8>
     d4e:	0f 92       	push	r0
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	8a 83       	std	Y+2, r24	; 0x02
     d56:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorFlag = ES_NOK;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	89 83       	std	Y+1, r24	; 0x01

    if ( (Copy_u8_PinGroup <= DIO_PIN_GROUP_D) && (Copy_u8_PinNumber <= DIO_PIN_7))
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	84 30       	cpi	r24, 0x04	; 4
     d60:	08 f0       	brcs	.+2      	; 0xd64 <DIO_enu_TogglePinValue+0x1e>
     d62:	73 c0       	rjmp	.+230    	; 0xe4a <DIO_enu_TogglePinValue+0x104>
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	88 30       	cpi	r24, 0x08	; 8
     d68:	08 f0       	brcs	.+2      	; 0xd6c <DIO_enu_TogglePinValue+0x26>
     d6a:	6f c0       	rjmp	.+222    	; 0xe4a <DIO_enu_TogglePinValue+0x104>
    {
        switch (Copy_u8_PinGroup)
     d6c:	8a 81       	ldd	r24, Y+2	; 0x02
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	3d 83       	std	Y+5, r19	; 0x05
     d74:	2c 83       	std	Y+4, r18	; 0x04
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	91 05       	cpc	r25, r1
     d7e:	49 f1       	breq	.+82     	; 0xdd2 <DIO_enu_TogglePinValue+0x8c>
     d80:	2c 81       	ldd	r18, Y+4	; 0x04
     d82:	3d 81       	ldd	r19, Y+5	; 0x05
     d84:	22 30       	cpi	r18, 0x02	; 2
     d86:	31 05       	cpc	r19, r1
     d88:	2c f4       	brge	.+10     	; 0xd94 <DIO_enu_TogglePinValue+0x4e>
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	9d 81       	ldd	r25, Y+5	; 0x05
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	61 f0       	breq	.+24     	; 0xdaa <DIO_enu_TogglePinValue+0x64>
     d92:	5a c0       	rjmp	.+180    	; 0xe48 <DIO_enu_TogglePinValue+0x102>
     d94:	2c 81       	ldd	r18, Y+4	; 0x04
     d96:	3d 81       	ldd	r19, Y+5	; 0x05
     d98:	22 30       	cpi	r18, 0x02	; 2
     d9a:	31 05       	cpc	r19, r1
     d9c:	71 f1       	breq	.+92     	; 0xdfa <DIO_enu_TogglePinValue+0xb4>
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	9d 81       	ldd	r25, Y+5	; 0x05
     da2:	83 30       	cpi	r24, 0x03	; 3
     da4:	91 05       	cpc	r25, r1
     da6:	e9 f1       	breq	.+122    	; 0xe22 <DIO_enu_TogglePinValue+0xdc>
     da8:	4f c0       	rjmp	.+158    	; 0xe48 <DIO_enu_TogglePinValue+0x102>
        {
            case DIO_PIN_GROUP_A:
            DIO_PORTA ^= ( 1 << Copy_u8_PinNumber);
     daa:	ab e3       	ldi	r26, 0x3B	; 59
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	eb e3       	ldi	r30, 0x3B	; 59
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <DIO_enu_TogglePinValue+0x82>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <DIO_enu_TogglePinValue+0x7e>
     dcc:	84 27       	eor	r24, r20
     dce:	8c 93       	st	X, r24
     dd0:	3b c0       	rjmp	.+118    	; 0xe48 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_B:
            DIO_PORTB ^= ( 1 << Copy_u8_PinNumber);
     dd2:	a8 e3       	ldi	r26, 0x38	; 56
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e8 e3       	ldi	r30, 0x38	; 56
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <DIO_enu_TogglePinValue+0xaa>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <DIO_enu_TogglePinValue+0xa6>
     df4:	84 27       	eor	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	27 c0       	rjmp	.+78     	; 0xe48 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_C:
            DIO_PORTC ^= ( 1 << Copy_u8_PinNumber);
     dfa:	a5 e3       	ldi	r26, 0x35	; 53
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e5 e3       	ldi	r30, 0x35	; 53
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <DIO_enu_TogglePinValue+0xd2>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <DIO_enu_TogglePinValue+0xce>
     e1c:	84 27       	eor	r24, r20
     e1e:	8c 93       	st	X, r24
     e20:	13 c0       	rjmp	.+38     	; 0xe48 <DIO_enu_TogglePinValue+0x102>
            break;

            case DIO_PIN_GROUP_D:
            DIO_PORTD ^= ( 1 << Copy_u8_PinNumber);
     e22:	a2 e3       	ldi	r26, 0x32	; 50
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e2 e3       	ldi	r30, 0x32	; 50
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	48 2f       	mov	r20, r24
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 2e       	mov	r0, r18
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_enu_TogglePinValue+0xfa>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_enu_TogglePinValue+0xf6>
     e44:	84 27       	eor	r24, r20
     e46:	8c 93       	st	X, r24

            default:
            break;
        }

        Local_u8_ErrorFlag = ES_OK;
     e48:	19 82       	std	Y+1, r1	; 0x01

    }

    return Local_u8_ErrorFlag;
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <DIO_enu_GetPinValue>:

extern ErrorState_t DIO_enu_GetPinValue(u8 Copy_u8_PinGroup, u8 Copy_u8_PinNumber, u8* Copy_pu8_PinValue)
{
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	27 97       	sbiw	r28, 0x07	; 7
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	8a 83       	std	Y+2, r24	; 0x02
     e72:	6b 83       	std	Y+3, r22	; 0x03
     e74:	5d 83       	std	Y+5, r21	; 0x05
     e76:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorFlag = ES_NOK;
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_pu8_PinValue)
     e7c:	8c 81       	ldd	r24, Y+4	; 0x04
     e7e:	9d 81       	ldd	r25, Y+5	; 0x05
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	09 f4       	brne	.+2      	; 0xe86 <DIO_enu_GetPinValue+0x2a>
     e84:	7d c0       	rjmp	.+250    	; 0xf80 <DIO_enu_GetPinValue+0x124>
    {

        if((Copy_u8_PinGroup <= DIO_PIN_GROUP_D ) && (Copy_u8_PinNumber <= DIO_PIN_7 ) )
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	84 30       	cpi	r24, 0x04	; 4
     e8a:	08 f0       	brcs	.+2      	; 0xe8e <DIO_enu_GetPinValue+0x32>
     e8c:	76 c0       	rjmp	.+236    	; 0xf7a <DIO_enu_GetPinValue+0x11e>
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	88 30       	cpi	r24, 0x08	; 8
     e92:	08 f0       	brcs	.+2      	; 0xe96 <DIO_enu_GetPinValue+0x3a>
     e94:	72 c0       	rjmp	.+228    	; 0xf7a <DIO_enu_GetPinValue+0x11e>
        {
            switch (Copy_u8_PinGroup)
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	3f 83       	std	Y+7, r19	; 0x07
     e9e:	2e 83       	std	Y+6, r18	; 0x06
     ea0:	4e 81       	ldd	r20, Y+6	; 0x06
     ea2:	5f 81       	ldd	r21, Y+7	; 0x07
     ea4:	41 30       	cpi	r20, 0x01	; 1
     ea6:	51 05       	cpc	r21, r1
     ea8:	59 f1       	breq	.+86     	; 0xf00 <DIO_enu_GetPinValue+0xa4>
     eaa:	8e 81       	ldd	r24, Y+6	; 0x06
     eac:	9f 81       	ldd	r25, Y+7	; 0x07
     eae:	82 30       	cpi	r24, 0x02	; 2
     eb0:	91 05       	cpc	r25, r1
     eb2:	34 f4       	brge	.+12     	; 0xec0 <DIO_enu_GetPinValue+0x64>
     eb4:	2e 81       	ldd	r18, Y+6	; 0x06
     eb6:	3f 81       	ldd	r19, Y+7	; 0x07
     eb8:	21 15       	cp	r18, r1
     eba:	31 05       	cpc	r19, r1
     ebc:	69 f0       	breq	.+26     	; 0xed8 <DIO_enu_GetPinValue+0x7c>
     ebe:	5b c0       	rjmp	.+182    	; 0xf76 <DIO_enu_GetPinValue+0x11a>
     ec0:	4e 81       	ldd	r20, Y+6	; 0x06
     ec2:	5f 81       	ldd	r21, Y+7	; 0x07
     ec4:	42 30       	cpi	r20, 0x02	; 2
     ec6:	51 05       	cpc	r21, r1
     ec8:	79 f1       	breq	.+94     	; 0xf28 <DIO_enu_GetPinValue+0xcc>
     eca:	8e 81       	ldd	r24, Y+6	; 0x06
     ecc:	9f 81       	ldd	r25, Y+7	; 0x07
     ece:	83 30       	cpi	r24, 0x03	; 3
     ed0:	91 05       	cpc	r25, r1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <DIO_enu_GetPinValue+0x7a>
     ed4:	3d c0       	rjmp	.+122    	; 0xf50 <DIO_enu_GetPinValue+0xf4>
     ed6:	4f c0       	rjmp	.+158    	; 0xf76 <DIO_enu_GetPinValue+0x11a>
            {
                case DIO_PIN_GROUP_A:
                (*Copy_pu8_PinValue) = (DIO_PINA >> Copy_u8_PinNumber) & 1;
     ed8:	e9 e3       	ldi	r30, 0x39	; 57
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a9 01       	movw	r20, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_enu_GetPinValue+0x94>
     eec:	55 95       	asr	r21
     eee:	47 95       	ror	r20
     ef0:	8a 95       	dec	r24
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_enu_GetPinValue+0x90>
     ef4:	ca 01       	movw	r24, r20
     ef6:	81 70       	andi	r24, 0x01	; 1
     ef8:	ec 81       	ldd	r30, Y+4	; 0x04
     efa:	fd 81       	ldd	r31, Y+5	; 0x05
     efc:	80 83       	st	Z, r24
     efe:	3b c0       	rjmp	.+118    	; 0xf76 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_B:
                (*Copy_pu8_PinValue) = (DIO_PINB >> Copy_u8_PinNumber) & 1;
     f00:	e6 e3       	ldi	r30, 0x36	; 54
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	a9 01       	movw	r20, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <DIO_enu_GetPinValue+0xbc>
     f14:	55 95       	asr	r21
     f16:	47 95       	ror	r20
     f18:	8a 95       	dec	r24
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <DIO_enu_GetPinValue+0xb8>
     f1c:	ca 01       	movw	r24, r20
     f1e:	81 70       	andi	r24, 0x01	; 1
     f20:	ec 81       	ldd	r30, Y+4	; 0x04
     f22:	fd 81       	ldd	r31, Y+5	; 0x05
     f24:	80 83       	st	Z, r24
     f26:	27 c0       	rjmp	.+78     	; 0xf76 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_C:
                (*Copy_pu8_PinValue) = (DIO_PINC >> Copy_u8_PinNumber) & 1;
     f28:	e3 e3       	ldi	r30, 0x33	; 51
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a9 01       	movw	r20, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <DIO_enu_GetPinValue+0xe4>
     f3c:	55 95       	asr	r21
     f3e:	47 95       	ror	r20
     f40:	8a 95       	dec	r24
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <DIO_enu_GetPinValue+0xe0>
     f44:	ca 01       	movw	r24, r20
     f46:	81 70       	andi	r24, 0x01	; 1
     f48:	ec 81       	ldd	r30, Y+4	; 0x04
     f4a:	fd 81       	ldd	r31, Y+5	; 0x05
     f4c:	80 83       	st	Z, r24
     f4e:	13 c0       	rjmp	.+38     	; 0xf76 <DIO_enu_GetPinValue+0x11a>
                break;

                case DIO_PIN_GROUP_D:
                (*Copy_pu8_PinValue) = (DIO_PIND >> Copy_u8_PinNumber) & 1;
     f50:	e0 e3       	ldi	r30, 0x30	; 48
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	a9 01       	movw	r20, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_enu_GetPinValue+0x10c>
     f64:	55 95       	asr	r21
     f66:	47 95       	ror	r20
     f68:	8a 95       	dec	r24
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_enu_GetPinValue+0x108>
     f6c:	ca 01       	movw	r24, r20
     f6e:	81 70       	andi	r24, 0x01	; 1
     f70:	ec 81       	ldd	r30, Y+4	; 0x04
     f72:	fd 81       	ldd	r31, Y+5	; 0x05
     f74:	80 83       	st	Z, r24

                default:
                break;
            }

            Local_u8_ErrorFlag =ES_OK;
     f76:	19 82       	std	Y+1, r1	; 0x01
     f78:	05 c0       	rjmp	.+10     	; 0xf84 <DIO_enu_GetPinValue+0x128>


        }
        else
        {
            Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_enu_GetPinValue+0x128>
        }

    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
     f80:	83 e0       	ldi	r24, 0x03	; 3
     f82:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
     f84:	89 81       	ldd	r24, Y+1	; 0x01
}
     f86:	27 96       	adiw	r28, 0x07	; 7
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	de bf       	out	0x3e, r29	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	cd bf       	out	0x3d, r28	; 61
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <LED_enu_Initialization>:

extern LED_t LED_astr_LEDsList [];

//APIs' implementations
extern ErrorState_t LED_enu_Initialization(void)
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <LED_enu_Initialization+0x6>
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	8a 83       	std	Y+2, r24	; 0x02
    
    u8 Local_u8_Counter = 0;
     fa6:	19 82       	std	Y+1, r1	; 0x01
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
     fa8:	19 82       	std	Y+1, r1	; 0x01
     faa:	31 c0       	rjmp	.+98     	; 0x100e <LED_enu_Initialization+0x76>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	88 2f       	mov	r24, r24
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	fc 01       	movw	r30, r24
     fb8:	e8 59       	subi	r30, 0x98	; 152
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	20 81       	ld	r18, Z
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	88 2f       	mov	r24, r24
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	fc 01       	movw	r30, r24
     fca:	e7 59       	subi	r30, 0x97	; 151
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	90 81       	ld	r25, Z
     fd0:	82 2f       	mov	r24, r18
     fd2:	69 2f       	mov	r22, r25
     fd4:	41 e0       	ldi	r20, 0x01	; 1
     fd6:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <DIO_enu_SetPinDiretion>
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	88 2f       	mov	r24, r24
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	fc 01       	movw	r30, r24
     fe6:	e8 59       	subi	r30, 0x98	; 152
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	20 81       	ld	r18, Z
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	fc 01       	movw	r30, r24
     ff8:	e7 59       	subi	r30, 0x97	; 151
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	90 81       	ld	r25, Z
     ffe:	82 2f       	mov	r24, r18
    1000:	69 2f       	mov	r22, r25
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	0e 94 ac 05 	call	0xb58	; 0xb58 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;
    
    u8 Local_u8_Counter = 0;
    
    for (Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++ )
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	8f 5f       	subi	r24, 0xFF	; 255
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	90 91 67 00 	lds	r25, 0x0067
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	89 17       	cp	r24, r25
    1016:	50 f2       	brcs	.-108    	; 0xfac <LED_enu_Initialization+0x14>
    {
        DIO_enu_SetPinDiretion(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_PIN_WRITE);
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_LOW);
    }

    Local_u8_ErrorFlag = ES_OK;
    1018:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <LED_enu_TurnOnLED>:

extern ErrorState_t LED_enu_TurnOnLED(u8 Copy_u8_LEDNumber)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	00 d0       	rcall	.+0      	; 0x102c <LED_enu_TurnOnLED+0x6>
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber < LED_u8_LEDsCount)
    1036:	90 91 67 00 	lds	r25, 0x0067
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	89 17       	cp	r24, r25
    103e:	c8 f4       	brcc	.+50     	; 0x1072 <LED_enu_TurnOnLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_HIGH);
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	fc 01       	movw	r30, r24
    104c:	e8 59       	subi	r30, 0x98	; 152
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	20 81       	ld	r18, Z
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	fc 01       	movw	r30, r24
    105e:	e7 59       	subi	r30, 0x97	; 151
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	90 81       	ld	r25, Z
    1064:	82 2f       	mov	r24, r18
    1066:	69 2f       	mov	r22, r25
    1068:	41 e0       	ldi	r20, 0x01	; 1
    106a:	0e 94 ac 05 	call	0xb58	; 0xb58 <DIO_enu_SetPinValue>
    106e:	89 83       	std	Y+1, r24	; 0x01
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <LED_enu_TurnOnLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8_ErrorFlag;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
}
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <LED_enu_TurnOffLED>:

extern ErrorState_t LED_enu_TurnOffLED(u8 Copy_u8_LEDNumber)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	00 d0       	rcall	.+0      	; 0x1088 <LED_enu_TurnOffLED+0x6>
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_LEDNumber <= LED_u8_LEDsCount)
    1092:	90 91 67 00 	lds	r25, 0x0067
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	98 17       	cp	r25, r24
    109a:	c8 f0       	brcs	.+50     	; 0x10ce <LED_enu_TurnOffLED+0x4c>
    {
        Local_u8_ErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Group,LED_astr_LEDsList[Copy_u8_LEDNumber].LED_Pin,DIO_LOW);
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	fc 01       	movw	r30, r24
    10a8:	e8 59       	subi	r30, 0x98	; 152
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	20 81       	ld	r18, Z
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	fc 01       	movw	r30, r24
    10ba:	e7 59       	subi	r30, 0x97	; 151
    10bc:	ff 4f       	sbci	r31, 0xFF	; 255
    10be:	90 81       	ld	r25, Z
    10c0:	82 2f       	mov	r24, r18
    10c2:	69 2f       	mov	r22, r25
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	0e 94 ac 05 	call	0xb58	; 0xb58 <DIO_enu_SetPinValue>
    10ca:	89 83       	std	Y+1, r24	; 0x01
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <LED_enu_TurnOffLED+0x50>

    }
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    10ce:	82 e0       	ldi	r24, 0x02	; 2
    10d0:	89 83       	std	Y+1, r24	; 0x01
    }


    return Local_u8_ErrorFlag;
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <LED_enu_TurnOnCombination>:

extern ErrorState_t LED_enu_TurnOnCombination(u8 Copy_u8_Combination)
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <LED_enu_TurnOnCombination+0x6>
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <LED_enu_TurnOnCombination+0x8>
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8_ErrorFlag = ES_OK;
    10ec:	1b 82       	std	Y+3, r1	; 0x03
    
    u8 Local_u8_TempErrorFlag = ES_OK;
    10ee:	1a 82       	std	Y+2, r1	; 0x02


    if(Copy_u8_Combination <= 7 )
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	88 30       	cpi	r24, 0x08	; 8
    10f4:	d8 f5       	brcc	.+118    	; 0x116c <LED_enu_TurnOnCombination+0x8e>
    {
        s8 Local_s8_Counter = 0;
    10f6:	19 82       	std	Y+1, r1	; 0x01

        for(Local_s8_Counter = Copy_u8_Combination - 1; Local_s8_Counter >= 0; Local_s8_Counter-- )
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	81 50       	subi	r24, 0x01	; 1
    10fc:	89 83       	std	Y+1, r24	; 0x01
    10fe:	32 c0       	rjmp	.+100    	; 0x1164 <LED_enu_TurnOnCombination+0x86>
        {
           Local_u8_TempErrorFlag = DIO_enu_SetPinValue(LED_astr_LEDsList[Local_s8_Counter].LED_Group, LED_astr_LEDsList[Local_s8_Counter].LED_Pin, (Copy_u8_Combination >> Local_s8_Counter) & 1 );
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	99 27       	eor	r25, r25
    1104:	87 fd       	sbrc	r24, 7
    1106:	90 95       	com	r25
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	fc 01       	movw	r30, r24
    110e:	e8 59       	subi	r30, 0x98	; 152
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	50 81       	ld	r21, Z
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	99 27       	eor	r25, r25
    1118:	87 fd       	sbrc	r24, 7
    111a:	90 95       	com	r25
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	fc 01       	movw	r30, r24
    1122:	e7 59       	subi	r30, 0x97	; 151
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	40 81       	ld	r20, Z
    1128:	8c 81       	ldd	r24, Y+4	; 0x04
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	99 27       	eor	r25, r25
    1132:	87 fd       	sbrc	r24, 7
    1134:	90 95       	com	r25
    1136:	b9 01       	movw	r22, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <LED_enu_TurnOnCombination+0x60>
    113a:	75 95       	asr	r23
    113c:	67 95       	ror	r22
    113e:	8a 95       	dec	r24
    1140:	e2 f7       	brpl	.-8      	; 0x113a <LED_enu_TurnOnCombination+0x5c>
    1142:	cb 01       	movw	r24, r22
    1144:	98 2f       	mov	r25, r24
    1146:	91 70       	andi	r25, 0x01	; 1
    1148:	85 2f       	mov	r24, r21
    114a:	64 2f       	mov	r22, r20
    114c:	49 2f       	mov	r20, r25
    114e:	0e 94 ac 05 	call	0xb58	; 0xb58 <DIO_enu_SetPinValue>
    1152:	8a 83       	std	Y+2, r24	; 0x02

            if(Local_u8_TempErrorFlag == ES_NOK)
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	11 f4       	brne	.+4      	; 0x115e <LED_enu_TurnOnCombination+0x80>
            {
                Local_u8_ErrorFlag = ES_NOK;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	8b 83       	std	Y+3, r24	; 0x03

    if(Copy_u8_Combination <= 7 )
    {
        s8 Local_s8_Counter = 0;

        for(Local_s8_Counter = Copy_u8_Combination - 1; Local_s8_Counter >= 0; Local_s8_Counter-- )
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	81 50       	subi	r24, 0x01	; 1
    1162:	89 83       	std	Y+1, r24	; 0x01
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	88 23       	and	r24, r24
    1168:	5c f6       	brge	.-106    	; 0x1100 <LED_enu_TurnOnCombination+0x22>
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <LED_enu_TurnOnCombination+0x92>
        }
        
    } 
    else
    {
        Local_u8_ErrorFlag = ES_OUT_OF_RANGE;
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	8b 83       	std	Y+3, r24	; 0x03
    }

    return Local_u8_ErrorFlag;
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <LED_enu_TurnOnAllLEDs>:

extern ErrorState_t LED_enu_TurnOnAllLEDs (void)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	00 d0       	rcall	.+0      	; 0x1186 <LED_enu_TurnOnAllLEDs+0x6>
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    118e:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    1190:	19 82       	std	Y+1, r1	; 0x01
    1192:	1a c0       	rjmp	.+52     	; 0x11c8 <LED_enu_TurnOnAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	fc 01       	movw	r30, r24
    11a0:	e8 59       	subi	r30, 0x98	; 152
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	20 81       	ld	r18, Z
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	fc 01       	movw	r30, r24
    11b2:	e7 59       	subi	r30, 0x97	; 151
    11b4:	ff 4f       	sbci	r31, 0xFF	; 255
    11b6:	90 81       	ld	r25, Z
    11b8:	82 2f       	mov	r24, r18
    11ba:	69 2f       	mov	r22, r25
    11bc:	41 e0       	ldi	r20, 0x01	; 1
    11be:	0e 94 ac 05 	call	0xb58	; 0xb58 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	8f 5f       	subi	r24, 0xFF	; 255
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	90 91 67 00 	lds	r25, 0x0067
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	89 17       	cp	r24, r25
    11d0:	08 f3       	brcs	.-62     	; 0x1194 <LED_enu_TurnOnAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin,DIO_HIGH);
    }
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    11d2:	1a 82       	std	Y+2, r1	; 0x02

    return Local_u8_ErrorFlag;
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <LED_enu_TurnOffAllLEDs>:

extern ErrorState_t LED_enu_TurnOffAllLEDs (void)
{
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <LED_enu_TurnOffAllLEDs+0x6>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	8a 83       	std	Y+2, r24	; 0x02

    u8 Local_u8_Counter = 0;
    11ee:	19 82       	std	Y+1, r1	; 0x01

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    11f0:	19 82       	std	Y+1, r1	; 0x01
    11f2:	1a c0       	rjmp	.+52     	; 0x1228 <LED_enu_TurnOffAllLEDs+0x48>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin, DIO_LOW);
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	fc 01       	movw	r30, r24
    1200:	e8 59       	subi	r30, 0x98	; 152
    1202:	ff 4f       	sbci	r31, 0xFF	; 255
    1204:	20 81       	ld	r18, Z
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	fc 01       	movw	r30, r24
    1212:	e7 59       	subi	r30, 0x97	; 151
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	90 81       	ld	r25, Z
    1218:	82 2f       	mov	r24, r18
    121a:	69 2f       	mov	r22, r25
    121c:	40 e0       	ldi	r20, 0x00	; 0
    121e:	0e 94 ac 05 	call	0xb58	; 0xb58 <DIO_enu_SetPinValue>
{
    u8 Local_u8_ErrorFlag = ES_NOK;

    u8 Local_u8_Counter = 0;

    for(Local_u8_Counter = 0; Local_u8_Counter < LED_u8_LEDsCount; Local_u8_Counter++)
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	8f 5f       	subi	r24, 0xFF	; 255
    1226:	89 83       	std	Y+1, r24	; 0x01
    1228:	90 91 67 00 	lds	r25, 0x0067
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	89 17       	cp	r24, r25
    1230:	08 f3       	brcs	.-62     	; 0x11f4 <LED_enu_TurnOffAllLEDs+0x14>
    {
        DIO_enu_SetPinValue(LED_astr_LEDsList[Local_u8_Counter].LED_Group,LED_astr_LEDsList[Local_u8_Counter].LED_Pin, DIO_LOW);
    }
    
    //Error Flags handling to be done later
    Local_u8_ErrorFlag = ES_OK;
    1232:	1a 82       	std	Y+2, r1	; 0x02
    
    return Local_u8_ErrorFlag;
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <LED_enu_GetLEDCount>:

extern ErrorState_t LED_enu_GetLEDCount(u8* Copy_u8_Count)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <LED_enu_GetLEDCount+0x6>
    1246:	0f 92       	push	r0
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	9b 83       	std	Y+3, r25	; 0x03
    124e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_ErrorFlag = ES_NOK;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	89 83       	std	Y+1, r24	; 0x01

    if(Copy_u8_Count)
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	9b 81       	ldd	r25, Y+3	; 0x03
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	39 f0       	breq	.+14     	; 0x126a <LED_enu_GetLEDCount+0x2a>
    {
        *Copy_u8_Count = LED_u8_LEDsCount;
    125c:	80 91 67 00 	lds	r24, 0x0067
    1260:	ea 81       	ldd	r30, Y+2	; 0x02
    1262:	fb 81       	ldd	r31, Y+3	; 0x03
    1264:	80 83       	st	Z, r24

        Local_u8_ErrorFlag = ES_OK;
    1266:	19 82       	std	Y+1, r1	; 0x01
    1268:	02 c0       	rjmp	.+4      	; 0x126e <LED_enu_GetLEDCount+0x2e>
    }
    else
    {
        Local_u8_ErrorFlag = ES_NULL_POINTER;
    126a:	83 e0       	ldi	r24, 0x03	; 3
    126c:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_u8_ErrorFlag;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <Ledlighter_enu_IncrementCount>:

static LedLight_t str_LEDLight;

//APIs' implementaions
void Ledlighter_enu_IncrementCount(void* Copy_pvid_Parameters)
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <Ledlighter_enu_IncrementCount+0x6>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
    if( str_LEDLight.LightCount < str_LEDLight.LEDsCount)
    128a:	90 91 7c 00 	lds	r25, 0x007C
    128e:	80 91 7d 00 	lds	r24, 0x007D
    1292:	98 17       	cp	r25, r24
    1294:	28 f4       	brcc	.+10     	; 0x12a0 <Ledlighter_enu_IncrementCount+0x24>
    {
        str_LEDLight.LightCount++;
    1296:	80 91 7c 00 	lds	r24, 0x007C
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	80 93 7c 00 	sts	0x007C, r24
    }
} 
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <Ledlighter_enu_DecrementCount>:

void Ledlighter_enu_DecrementCount(void* Copy_pvid_Parameters)
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <Ledlighter_enu_DecrementCount+0x6>
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	89 83       	std	Y+1, r24	; 0x01
    if( str_LEDLight.LightCount > 0)
    12b8:	80 91 7c 00 	lds	r24, 0x007C
    12bc:	88 23       	and	r24, r24
    12be:	29 f0       	breq	.+10     	; 0x12ca <Ledlighter_enu_DecrementCount+0x20>
    {
        str_LEDLight.LightCount--;
    12c0:	80 91 7c 00 	lds	r24, 0x007C
    12c4:	81 50       	subi	r24, 0x01	; 1
    12c6:	80 93 7c 00 	sts	0x007C, r24
    }
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <LedLighter_enu_initialization>:

extern ErrorState_t LedLighter_enu_initialization(void)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	00 d0       	rcall	.+0      	; 0x12da <LedLighter_enu_initialization+0x6>
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	89 83       	std	Y+1, r24	; 0x01
    u8 Local_u8_Count = 0;
    12e2:	1a 82       	std	Y+2, r1	; 0x02

    //INitializing LEDs
    LED_enu_Initialization();
    12e4:	0e 94 cc 07 	call	0xf98	; 0xf98 <LED_enu_Initialization>

    //Getting LEDs count
    LED_enu_GetLEDCount(&Local_u8_Count);
    12e8:	ce 01       	movw	r24, r28
    12ea:	02 96       	adiw	r24, 0x02	; 2
    12ec:	0e 94 20 09 	call	0x1240	; 0x1240 <LED_enu_GetLEDCount>

    str_LEDLight.LEDsCount = Local_u8_Count;
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	80 93 7d 00 	sts	0x007D, r24
    str_LEDLight.LightCount = 0;
    12f6:	10 92 7c 00 	sts	0x007C, r1


    //Initializing EXTTI INT) and INT1
    EXTI_enu_Initialization();
    12fa:	0e 94 59 00 	call	0xb2	; 0xb2 <EXTI_enu_Initialization>


    //Setting Call back functions
    EXTI_enu_SetCallBack(EXTI_INT0, Ledlighter_enu_IncrementCount, &str_LEDLight );
    12fe:	2e e3       	ldi	r18, 0x3E	; 62
    1300:	39 e0       	ldi	r19, 0x09	; 9
    1302:	4c e7       	ldi	r20, 0x7C	; 124
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	b9 01       	movw	r22, r18
    130a:	0e 94 4f 01 	call	0x29e	; 0x29e <EXTI_enu_SetCallBack>
    EXTI_enu_SetCallBack(EXTI_INT1, Ledlighter_enu_DecrementCount, &str_LEDLight );
    130e:	25 e5       	ldi	r18, 0x55	; 85
    1310:	39 e0       	ldi	r19, 0x09	; 9
    1312:	4c e7       	ldi	r20, 0x7C	; 124
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 4f 01 	call	0x29e	; 0x29e <EXTI_enu_SetCallBack>

    //Enabling GIE 
    SREG_vid_EnableBitI();
    131e:	0e 94 49 00 	call	0x92	; 0x92 <SREG_vid_EnableBitI>


    return Local_u8_ErrorFlag;
    1322:	89 81       	ldd	r24, Y+1	; 0x01
}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <LedLighter_enu_Operate>:

extern ErrorState_t LedLighter_enu_Operate(void)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	0f 92       	push	r0
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_NOK;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01
    
    while(1)
    {
        enu_LightLEDS();
    133c:	0e 94 a1 09 	call	0x1342	; 0x1342 <enu_LightLEDS>
    1340:	fd cf       	rjmp	.-6      	; 0x133c <LedLighter_enu_Operate+0xe>

00001342 <enu_LightLEDS>:
    }
    return Local_u8_ErrorFlag;
}

static ErrorState_t enu_LightLEDS(void)
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	00 d0       	rcall	.+0      	; 0x1348 <enu_LightLEDS+0x6>
    1348:	0f 92       	push	r0
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    u8 Local_u8_ErrorFlag = ES_OK;
    134e:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8_TempErrorFlag = ES_OK;
    1350:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Couter = 0;
    1352:	19 82       	std	Y+1, r1	; 0x01
    
    //Tunrning off all LEDS
    LED_enu_TurnOffAllLEDs();
    1354:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <LED_enu_TurnOffAllLEDs>

    for (Local_u8_Couter = 0; Local_u8_Couter < str_LEDLight.LightCount; Local_u8_Couter++)
    1358:	19 82       	std	Y+1, r1	; 0x01
    135a:	0c c0       	rjmp	.+24     	; 0x1374 <enu_LightLEDS+0x32>
    {
        //Turing on LEDS equal to LightCount
        Local_u8_TempErrorFlag = LED_enu_TurnOnLED(Local_u8_Couter);
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	0e 94 13 08 	call	0x1026	; 0x1026 <LED_enu_TurnOnLED>
    1362:	8a 83       	std	Y+2, r24	; 0x02

        if(Local_u8_TempErrorFlag == ES_NOK)
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	81 30       	cpi	r24, 0x01	; 1
    1368:	11 f4       	brne	.+4      	; 0x136e <enu_LightLEDS+0x2c>
        {
            Local_u8_ErrorFlag = ES_NOK;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_Couter = 0;
    
    //Tunrning off all LEDS
    LED_enu_TurnOffAllLEDs();

    for (Local_u8_Couter = 0; Local_u8_Couter < str_LEDLight.LightCount; Local_u8_Couter++)
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	8f 5f       	subi	r24, 0xFF	; 255
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	90 91 7c 00 	lds	r25, 0x007C
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	89 17       	cp	r24, r25
    137c:	78 f3       	brcs	.-34     	; 0x135c <enu_LightLEDS+0x1a>
        {
            Local_u8_ErrorFlag = ES_NOK;
        }
    }

    return Local_u8_ErrorFlag;
    137e:	8b 81       	ldd	r24, Y+3	; 0x03

    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <main>:
#include "LedLighter_Interface.h"

int main(void)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62

	//Initializing the system
	LedLighter_enu_initialization();
    1394:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <LedLighter_enu_initialization>

	//Operating the system
	LedLighter_enu_Operate();	
    1398:	0e 94 97 09 	call	0x132e	; 0x132e <LedLighter_enu_Operate>
	return 0;
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
}
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <_exit>:
    13a6:	f8 94       	cli

000013a8 <__stop_program>:
    13a8:	ff cf       	rjmp	.-2      	; 0x13a8 <__stop_program>
